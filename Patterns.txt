1)Write a code to generate a half pyramid number pattern.

Input Description:
Given an even integer R indicates number of rows.

Where 1<=R<=100.

Output Description:
Print the number half pyramid pattern with the size R.

Sample Input :
5
Sample Output :
12345
4321
123
21
1

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let star=[];
let count=0;
   let a= userInput[0];
  for(let i=a;i>0;i--){
      for(let j=1;j<=i;j++){
          star.push(j);   
      }
      count++;
      if(count%2 === 0){
          star.reverse()
           console.log(star.join(""));
      }else{
           console.log(star.join(""));
      }
      star=[];
  }
});
---------------------------------------------------------------------------------------------

2)Write a code to generate an inverted half pyramid pattern using stars.

Input Description:
Given an integer R indicates number of rows.

Where 1<=R<=100.

Output Description:
Print the star inverted pyramid with the given integer R.

Sample Input :
5
Sample Output :
*  *  *  *  *
*  *  *  *
*  *  *
*  *
*

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let star=[];
   let a= userInput[0];
  for(let i=a;i>0;i--){
      for(let j=1;j<=i;j++){
          star.push("*");
      }
      console.log(star.join("  "));
      star=[];
  }
});
---------------------------------------------------------------------------------------------

3)Generate a floyd's triangle.

Input Description:
Given an integer R indicates number of rows.

Where 1<=R<=100.

Output Description:
Print a floyd's triangle based on the given integer R.

Sample Input :
5
Sample Output :
1
2 3
4 5 6
7 8 9 10
11 12 13 14 15

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let star=[];
let count=0;
   let a= userInput[0];
  for(let i=1;i<=a;i++){
      for(let j=1;j<=i;j++){
          star.push(count+=1);
      }
      console.log(star.join(" "));
      star=[];
  }
});
---------------------------------------------------------------------------------------------

4)

CODE:

---------------------------------------------------------------------------------------------

5)Write a code to generate a half pyramid pattern using numbers.

Input Description:
Given an integer R indicates number of rows.

Where 1<=R<=100.

Output Description:
Print the number half pyramid pattern with the size R.

Sample Input :
5
Sample Output :
55555
4444
333
22
1

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let star=[];
   let a= userInput[0];
  for(let i=a;i>0;i--){
      for(let j=1;j<=i;j++){
          star.push(i);
      }
      console.log(star.join(""));
      star=[];
  }
});
---------------------------------------------------------------------------------------------

6)Write a code to generate a half pyramid pattern using numbers.

Input Description:
Given an integer R indicates number of rows.

Where 1<=R<=100.

Output Description:
Print the number half pyramid pattern with the size R.

Sample Input :
5
Sample Output :
1
22
333
4444
55555

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let star=[];
   let a= userInput[0];
for(let i=1;i<=a;i++){
      for(let j=1;j<=i;j++){
          star.push(i);
      }
      console.log(star.join(""));
      star=[];
  }
});
---------------------------------------------------------------------------------------------

7)

CODE:

---------------------------------------------------------------------------------------------

8)Write a code to generate a square pattern using the number '1'.

Input Description:
Given an integer R indicates number of rows.

Where 1<=R<=100.

Output Description:
Print the square pattern with the number '1' in R*R form based on the given integer R.

Sample Input :
5
Sample Output :
11111
11111
11111
11111
11111

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let star=[];
   let a= userInput[0];
  for(let i=1;i<=a;i++){
      for(let j=1;j<=a;j++){
          star.push("1");
      }
      console.log(star.join(""));
      star=[];
  }
});
---------------------------------------------------------------------------------------------

9)Write a code to generate a hollow rectangle using stars. 

Input Description:
Given an integer R indicates no of rows and an integer C indicates no of columns.

Where 1<=R<=100 and Where 1<=C<=100.

Output Description:
Print the hollow rectangle using stars with R rows and C columns.

Sample Input :
3 5
Sample Output :
* * * * *
*       *
* * * * *

CODE:
// Getting input via STDIN
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  let a= userInput[0].split(" ");
 
  let row=parseInt(a[0]);
  let column=parseInt(a[1]);
  for(let i=1;i<=row;i++){
      let star=[];
      for(let j=1;j<=column;j++){
          if(i === 1 || i === row){
              star.push("*");
          }
          else if (j === 1 || j === column) {
        star.push("*");
      }
      else {
        star.push(" ");
      }
      }
      console.log(star.join(" "));
  }
});

---------------------------------------------------------------------------------------------

10)Generate a solid rectangle using stars. 

Input Description:
Given an integer R indicates no of rows and an integer C indicates no of columns.

Where 1<=R<=100 and Where 1<=C<=100.

Output Description:
Print the rectangle using stars with R rows and C columns.

Sample Input :
3 5
Sample Output :
* * * * *
* * * * *
* * * * *

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let star=[];
   let a= userInput[0].split(" ");
   let arr=[];
   let row=a[0];
   let column=a[1];
   for(let i=1;i<=row;i++){
       for(let j=1;j<=column;j++){
           arr.push("*");
       }
       console.log(arr.join(" "));
       arr=[];
   }
});
---------------------------------------------------------------------------------------------

11)

CODE:

---------------------------------------------------------------------------------------------

12)Generate a half pyramid pattern using numbers.

Input Description:
Given an integer R indicates number of rows.

Where 1<=R<=100.

Output Description:
Print the half pyramid pattern based on the given integer R.

Sample Input :
5
Sample Output :
1
12
123
1234
12345

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let star=[];
   let a= userInput[0];
  for(let i=1;i<=a;i++){
      for(let j=1;j<=i;j++){
          star.push(j);
      }
      console.log(star.join(""));
      star=[];
  }
});
---------------------------------------------------------------------------------------------

13)Write a code to generate a pyramid pattern using stars from the given input size N.

Input Description:
Given an integer R indicates number of rows.

Where 1<=R<=100.

Output Description:
Print the star pyramid with the given integer R.

Sample Input :
5
Sample Output :
*
* *
* * *
* * * *
* * * * *

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let star=[];
   let a= userInput[0];
for(let i=1;i<=a;i++){
      for(let j=1;j<=i;j++){
          star.push("*");
      }
      console.log(star.join(" "));
      star=[];
  }
});
---------------------------------------------------------------------------------------------

14) 

CODE:

---------------------------------------------------------------------------------------------

15) 

CODE:

---------------------------------------------------------------------------------------------

16) 

CODE:

---------------------------------------------------------------------------------------------

17) 

CODE:

---------------------------------------------------------------------------------------------

18) 

CODE:

---------------------------------------------------------------------------------------------

19) Write a code to generate a inverted half pyramid pattern using numbers.

Input Description:
Given an integer R indicates number of rows.

Where 1<=R<=100

Output Description:
Print the number half pyramid pattern with the size R.

Sample Input :
5
Sample Output :
12345
1234
123
12
1

CODE:
// Getting input via STDIN
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let star=[];
   let a= userInput[0];
  for(let i=a;i>0;i--){
      for(let j=1;j<=i;j++){
          star.push(j);   
      }
     console.log(star.join(""));
      star=[];
  }
});
---------------------------------------------------------------------------------------------

20) 

CODE:

---------------------------------------------------------------------------------------------

21) 

CODE:

---------------------------------------------------------------------------------------------

22) 

CODE:

---------------------------------------------------------------------------------------------

23) 

CODE:

---------------------------------------------------------------------------------------------

24) 

CODE:

---------------------------------------------------------------------------------------------

25) 

CODE:

---------------------------------------------------------------------------------------------

26) 

CODE:

---------------------------------------------------------------------------------------------

27) 

CODE:

---------------------------------------------------------------------------------------------

28)Write a code to generate a half pyramid number pattern.

Input Description:
Given an even integer R indicates number of rows.

Where 1<=R<=100

Output Description:
Print the number pattern based on the given integer R.

Sample Input :
5
Sample Output :
12345
1234
123
12
1

CODE:
// Getting input via STDIN
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let star=[];
   let a= userInput[0];
  for(let i=a;i>0;i--){
      for(let j=1;j<=i;j++){
          star.push(j);   
      }
     console.log(star.join(""));
      star=[];
  }
});
---------------------------------------------------------------------------------------------


