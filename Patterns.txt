1)Write a code to generate a half pyramid number pattern.

Input Description:
Given an even integer R indicates number of rows.

Where 1<=R<=100.

Output Description:
Print the number half pyramid pattern with the size R.

Sample Input :
5
Sample Output :
12345
4321
123
21
1

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let star=[];
let count=0;
   let a= userInput[0];
  for(let i=a;i>0;i--){
      for(let j=1;j<=i;j++){
          star.push(j);   
      }
      count++;
      if(count%2 === 0){
          star.reverse()
           console.log(star.join(""));
      }else{
           console.log(star.join(""));
      }
      star=[];
  }
});
---------------------------------------------------------------------------------------------

2)Write a code to generate an inverted half pyramid pattern using stars.

Input Description:
Given an integer R indicates number of rows.

Where 1<=R<=100.

Output Description:
Print the star inverted pyramid with the given integer R.

Sample Input :
5
Sample Output :
*  *  *  *  *
*  *  *  *
*  *  *
*  *
*

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let star=[];
   let a= userInput[0];
  for(let i=a;i>0;i--){
      for(let j=1;j<=i;j++){
          star.push("*");
      }
      console.log(star.join("  "));
      star=[];
  }
});
---------------------------------------------------------------------------------------------

3)Generate a floyd's triangle.

Input Description:
Given an integer R indicates number of rows.

Where 1<=R<=100.

Output Description:
Print a floyd's triangle based on the given integer R.

Sample Input :
5
Sample Output :
1
2 3
4 5 6
7 8 9 10
11 12 13 14 15

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let star=[];
let count=0;
   let a= userInput[0];
  for(let i=1;i<=a;i++){
      for(let j=1;j<=i;j++){
          star.push(count+=1);
      }
      console.log(star.join(" "));
      star=[];
  }
});
---------------------------------------------------------------------------------------------

4)

CODE:

---------------------------------------------------------------------------------------------

5)Write a code to generate a half pyramid pattern using numbers.

Input Description:
Given an integer R indicates number of rows.

Where 1<=R<=100.

Output Description:
Print the number half pyramid pattern with the size R.

Sample Input :
5
Sample Output :
55555
4444
333
22
1

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let star=[];
   let a= userInput[0];
  for(let i=a;i>0;i--){
      for(let j=1;j<=i;j++){
          star.push(i);
      }
      console.log(star.join(""));
      star=[];
  }
});
---------------------------------------------------------------------------------------------

6)Write a code to generate a half pyramid pattern using numbers.

Input Description:
Given an integer R indicates number of rows.

Where 1<=R<=100.

Output Description:
Print the number half pyramid pattern with the size R.

Sample Input :
5
Sample Output :
1
22
333
4444
55555

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let star=[];
   let a= userInput[0];
for(let i=1;i<=a;i++){
      for(let j=1;j<=i;j++){
          star.push(i);
      }
      console.log(star.join(""));
      star=[];
  }
});
---------------------------------------------------------------------------------------------

7)

CODE:

---------------------------------------------------------------------------------------------

8)Write a code to generate a square pattern using the number '1'.

Input Description:
Given an integer R indicates number of rows.

Where 1<=R<=100.

Output Description:
Print the square pattern with the number '1' in R*R form based on the given integer R.

Sample Input :
5
Sample Output :
11111
11111
11111
11111
11111

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let star=[];
   let a= userInput[0];
  for(let i=1;i<=a;i++){
      for(let j=1;j<=a;j++){
          star.push("1");
      }
      console.log(star.join(""));
      star=[];
  }
});
---------------------------------------------------------------------------------------------

9)Write a code to generate a hollow rectangle using stars. 

Input Description:
Given an integer R indicates no of rows and an integer C indicates no of columns.

Where 1<=R<=100 and Where 1<=C<=100.

Output Description:
Print the hollow rectangle using stars with R rows and C columns.

Sample Input :
3 5
Sample Output :
* * * * *
*       *
* * * * *

CODE:
// Getting input via STDIN
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  let a= userInput[0].split(" ");
 
  let row=parseInt(a[0]);
  let column=parseInt(a[1]);
  for(let i=1;i<=row;i++){
      let star=[];
      for(let j=1;j<=column;j++){
          if(i === 1 || i === row){
              star.push("*");
          }
          else if (j === 1 || j === column) {
        star.push("*");
      }
      else {
        star.push(" ");
      }
      }
      console.log(star.join(" "));
  }
});

---------------------------------------------------------------------------------------------

10)Generate a solid rectangle using stars. 

Input Description:
Given an integer R indicates no of rows and an integer C indicates no of columns.

Where 1<=R<=100 and Where 1<=C<=100.

Output Description:
Print the rectangle using stars with R rows and C columns.

Sample Input :
3 5
Sample Output :
* * * * *
* * * * *
* * * * *

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let star=[];
   let a= userInput[0].split(" ");
   let arr=[];
   let row=a[0];
   let column=a[1];
   for(let i=1;i<=row;i++){
       for(let j=1;j<=column;j++){
           arr.push("*");
       }
       console.log(arr.join(" "));
       arr=[];
   }
});
---------------------------------------------------------------------------------------------

11) Write a code to generate a pyramid using stars.
Input Description:
Given an integer R indicates number of rows.

Where 1<=R<=100.

Output Description:
Print the pyramid pattern using stars based on the given integer R.

Sample Input :
5
Sample Output :
*****
 ****
  ***
   **
    *

CODE:
// Getting input via STDIN
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
 let a= parseInt(userInput[0]);
 
 for(let i=0;i<a;i++){
     let arr=[];
     for(let j=0;j<a;j++){
         if(j>=i){
            arr.push("*"); 
         }else{
             arr.push(" ");
         }}
     console.log(arr.join(""));
 }
});
---------------------------------------------------------------------------------------------

12)Generate a half pyramid pattern using numbers.

Input Description:
Given an integer R indicates number of rows.

Where 1<=R<=100.

Output Description:
Print the half pyramid pattern based on the given integer R.

Sample Input :
5
Sample Output :
1
12
123
1234
12345

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let star=[];
   let a= userInput[0];
  for(let i=1;i<=a;i++){
      for(let j=1;j<=i;j++){
          star.push(j);
      }
      console.log(star.join(""));
      star=[];
  }
});
---------------------------------------------------------------------------------------------

13)Write a code to generate a pyramid pattern using stars from the given input size N.

Input Description:
Given an integer R indicates number of rows.

Where 1<=R<=100.

Output Description:
Print the star pyramid with the given integer R.

Sample Input :
5
Sample Output :
*
* *
* * *
* * * *
* * * * *

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let star=[];
   let a= userInput[0];
for(let i=1;i<=a;i++){
      for(let j=1;j<=i;j++){
          star.push("*");
      }
      console.log(star.join(" "));
      star=[];
  }
});
---------------------------------------------------------------------------------------------

14) Write a code to generate a pyramid using stars.

Input Description:
Given an integer R indicates number of rows.

Where 1<=R<=100.

Output Description:
Print the pyramid pattern using stars based on the given integer R.

Sample Input :
6
Sample Output :
     *
    **
   ***
  ****
 *****
******

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let a=parseInt(userInput[0]);
let start=a-1;
let arr=[];
for(let i=1;i<=a;i++){
    for(j=1;j<=a;j++){
        if(j>start){
            arr.push("*");
        }else{
            arr.push(" ");
        }}
    console.log(arr.join(""));
    arr=[];
    start--;
}
});
---------------------------------------------------------------------------------------------

15) 

CODE:

---------------------------------------------------------------------------------------------

16) 

CODE:

---------------------------------------------------------------------------------------------

17) 

CODE:

---------------------------------------------------------------------------------------------

18) 

CODE:

---------------------------------------------------------------------------------------------

19) Write a code to generate a inverted half pyramid pattern using numbers.

Input Description:
Given an integer R indicates number of rows.

Where 1<=R<=100

Output Description:
Print the number half pyramid pattern with the size R.

Sample Input :
5
Sample Output :
12345
1234
123
12
1

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let star=[];
   let a= userInput[0];
  for(let i=a;i>0;i--){
      for(let j=1;j<=i;j++){
          star.push(j);   
      }
     console.log(star.join(""));
      star=[];
  }
});
---------------------------------------------------------------------------------------------

20) Generate the following pattern.

*****
b****
bb***
bbb**
bbbb*

Input Description:
Input consists of a single integer that corresponds to n, the number of rows.

where 1<=n<=100.

Output Description:
Print the character pattern from the given input n.

Sample Input :
5
Sample Output :
*****
b****
bb***
bbb**
bbbb*

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  let n=parseInt(userInput[0]);
  let arr=[];
  for(let i=0;i<n;i++){
      for(let j=0;j<n;j++){
          if(j>=i){
              arr.push("*");
          }
          else{
              arr.push("b");
          }}
      console.log(arr.join(""));
   arr=[];   
  }
});
---------------------------------------------------------------------------------------------

21) 

CODE:

---------------------------------------------------------------------------------------------

22) Write a code to generate a half pyramid pattern using numbers.

Input Description:
Given an integer R indicates number of rows.

Where 1<=R<=100

Output Description:
Print the number half pyramid pattern with the size R.

Sample Input :
5
Sample Output :
12345
2345
345
45
5

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let a=userInput[0];
let arr=[];
for(let i=1;i<=a;i++){
    for(let j=i;j<=a;j++){
        arr.push(j);
        
    }
    console.log(arr.join(""))
    arr=[];
}
});
---------------------------------------------------------------------------------------------

23) Write a code to generate a solid half diamond pattern using stars.

Input Description:
Given an integer R indicates number of rows.

Where 1<=R<=100.

Output Description:
Print the solid half diamond pattern based on the given integer R.

Sample Input :
5
Sample Output :
*
**
***
****
*****
****
***
**
*

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let star=[];
   let a= userInput[0];
for(let i=1;i<=a;i++){
      for(let j=1;j<=i;j++){
          star.push("*");
      }
      console.log(star.join(""));
      star=[];
  }
  for(let i=a-1;i>0;i--){
      for(let j=1;j<=i;j++){
          star.push("*");
      }
      console.log(star.join(""));
      star=[];
  }
});
---------------------------------------------------------------------------------------------

24) 

CODE:

---------------------------------------------------------------------------------------------

25) Write a code to generate a half pyramid pattern using numbers.

Input Description:
Given an integer R indicates number of rows.

Where 1<=R<=100

Output Description:
Print the number half pyramid pattern with the size R.

Sample Input :
5
Sample Output :
54321
4321
321
21
1

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let a=userInput[0];
let arr=[];
for(let i=a;i>=1;i--){
    for(let j=i;j>=1;j--){
        arr.push(j);  
    }
    console.log(arr.join(""));
    arr=[];
}
});

---------------------------------------------------------------------------------------------

26) 

CODE:

---------------------------------------------------------------------------------------------

27) 

CODE:

---------------------------------------------------------------------------------------------

28)Write a code to generate a half pyramid number pattern.

Input Description:
Given an even integer R indicates number of rows.

Where 1<=R<=100

Output Description:
Print the number pattern based on the given integer R.

Sample Input :
5
Sample Output :
12345
1234
123
12
1

CODE:
// Getting input via STDIN
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let star=[];
   let a= userInput[0];
  for(let i=a;i>0;i--){
      for(let j=1;j<=i;j++){
          star.push(j);   
      }
     console.log(star.join(""));
      star=[];
  }
});
---------------------------------------------------------------------------------------------

34) Write a code to generate a half pyramid pattern using numbers.


Input Description:
Given an integer R indicates number of rows.

Where 1<=R<=100

Output Description:
Print the number half pyramid pattern with the size R.

Sample Input :
5
Sample Output :
5
45
345
2345
12345

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let a=parseInt(userInput[0]);
let arr=[];

let start=a;
for(let i=0;i<a;i++){
    start=a-i;
    for(let j=0;j<=i;j++){
       arr.push(start);
       start++;
    }
    console.log(arr.join(""));
    arr=[];
}
});
---------------------------------------------------------------------------------------------

38) Generate a number pyramid pattern.

Input Description:
Given an integer R indicates number of rows.

Where 1<=R<=100

Output Description:
Print the number half pyramid pattern with the size R.

Sample Input :
4
Sample Output :
1234567
12345
123
1

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  let a=userInput[0];
  let num=a*2
  let arr=[]
  for(let i=0;i<a;i++)
  {
      for(let j=1;j<num;j++){
          arr.push(j);
      }
      console.log(arr.join(""))
      num-=2;
      arr=[];
  }
});
---------------------------------------------------------------------------------------------

41) Write a code to generate a half pyramid pattern using numbers.


Input Description:
Given an integer R indicates number of rows.

Where 1<=R<=100.

Output Description:
Print the number half pyramid pattern with the size R.

Sample Input :
5
Sample Output :
1
24
135
2468
13579

CODE:
// Getting input via STDIN
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
 let a= parseInt(userInput[0]);
 let arr=[];
 let k=1;
 let l=2;
for(let i=0;i<a;i++){
    for(let j=0;j<=i;j++){
        if(i%2===0){
            arr.push(k);
            k+=2;
        }else{
            arr.push(l);
            l+=2;
        }}
    console.log(arr.join(""));
    arr=[];
    k=1;
    l=2;
}});
---------------------------------------------------------------------------------------------

43) Write a code to generate a square pattern using numbers.
Input Description:
Given an integer R indicates number of rows.

Where 1<=R<=100.

Output Description:
Print the number pattern separated with space with the size R.

Sample Input :
5
Sample Output :
5 5 5 5 5
4 5 5 5 5
3 4 5 5 5
2 3 4 5 5
1 2 3 4 5
CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let a=parseInt(userInput[0]);
let arr=[];

let start=a;
for(let i=0;i<a;i++){
    start=a-i;
    for(let j=0;j<a;j++){
        if(start>a){
            arr.push(a);
        }else{
             arr.push(start);
       start++; 
        }}
    console.log(arr.join(" "));
    arr=[];
}
});

---------------------------------------------------------------------------------------------

45) Write a code to generate a aplhabet half pyramid pattern.


Input Description:
Given an integer R indicates number of rows.

Where 1<=R<=26.

Output Description:
Print the alphabet half pyramid pattern according to the given integer R.

Sample Input :
5
Sample Output :
ABCDE
 ABCD
  ABC
   AB
    A

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
 let a= parseInt(userInput[0]);
 for(let i=0;i<a;i++){
     let arr=[];
     for(let j=0;j<a;j++){
         if(j>=i){
            arr.push(String.fromCharCode(65+j-i));
         }else{
             arr.push(" ");
         }}
     console.log(arr.join(""));
 }});
---------------------------------------------------------------------------------------------

54) Write a code to generate a half pyramid pattern of mulitples of the given number.

Input Description:
Given an integer R indicates number of rows.

Where 1<=R<=100.

Output Description:
Print the number half pyramid pattern of multiples based on the given integer R.

Sample Input :
10
Sample Output :
1
2 4
3 6 9
4 8 12 16
5 10 15 20 25
6 12 18 24 30 36
7 14 21 28 35 42 49
8 16 24 32 40 48 56 64
9 18 27 36 45 54 63 72 81
10 20 30 40 50 60 70 80 90 100

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let n=parseInt(userInput[0]);
let arr=[];
for(let i=1;i<=n;i++){
    for(let j=1;j<=i;j++){
        arr.push(i*j);
    }
    console.log(arr.join(" "));
    arr=[];
}});