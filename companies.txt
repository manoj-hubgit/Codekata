1) Given 2 numbers N,K and an array of N integers, find if the element K exists in the array.
Input Size : N <= 100000
Sample Testcase :
INPUT
5 2
1 2 3 4 5
OUTPUT
yes
HINT: Read about Binary Search

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
 let a=userInput[0].split(" ");
 let total=a[0];
 let check=a[1];
 let val=userInput[1].split(" ");
 let count=0;
 for(let i=0;i<total;i++){
     if(check==val[i]){
         console.log("yes");
         count+=1;
         break;
     }}
 if(count===0){
     console.log("no")
 }
});
---------------------------------------------------------------------------------------------
2) How many possible ways are to shuffle given number of playing cards?.
Input Size : |N| <= 1000000
Sample Testcase :
INPUT
7
OUTPUT
5040

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  let a=parseInt(userInput[0]);
  let num=1;
  for(let i=a;i>1;i--){
      num*=i;
  }
  console.log(num);
});
---------------------------------------------------------------------------------------------

3) Given the values of a,b and x in the equation ax + b = y. Find the value of y.
Sample Testcase :
INPUT
3 5 2
OUTPUT
11

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
 let d=userInput[0].split(" ");
 let a= parseInt(d[0]);
 let b= parseInt(d[1]);
 let x= parseInt(d[2]);
 console.log((a*x)+b);
});
---------------------------------------------------------------------------------------------

4) Given 2 arrays print 'yes' if they are mirror images of each other,otherwise 'no'.
Input Size : N <= 1000000
Sample Testcase :
INPUT
4
1 2 3 4
4 3 2 1
OUTPUT
yes

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
    let total=userInput[0];
 let a=userInput[1].split(" ").join("");
 let b=userInput[2].split(" ").reverse().join("");
 if(a.length==b.length){
     if(a==b){
         console.log("yes");
     }else{
         console.log("no");
     }
 }
});
---------------------------------------------------------------------------------------------

5) Given a string and a number K, change every kth character to uppercase from beginning in string.
Sample Testcase :
INPUT
string 2
OUTPUT
sTrInG

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let n=userInput[0].split(" ");
let a=n[0].split("");
let val=n[1];
let ans=[]
let num=0;
for(let i=0;i<a.length;i++){
    num+=1;
    if(num%val===0){
       ans.push(a[i].toUpperCase()) ;
    }else{
       ans.push(a[i]) 
    }}
  console.log(ans.join(""));
});
---------------------------------------------------------------------------------------------

6) Given a number 'N' print the sum of each digit to the power of number of digits in given input.
Example :
Input => 1234
=> ( 1 ^ 4 ) + ( 2 ^ 4 ) + ( 3 ^ 4 ) + ( 4 ^ 4 )
=> 1 + 16 + 81 + 256
Output => 354
N <=100000000000
Sample Testcase :
INPUT
1234
OUTPUT
354

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  let a=userInput[0].split("").map(Number);
  let total=0;
  for(let i=0;i<a.length;i++){
      total+=Math.pow(a[i],a.length);
  }
  console.log(total);
});
---------------------------------------------------------------------------------------------
7) Given a string S ,print the vowels first and then consonants in the same order as 
they have occurred in the string.
Input Size : N <= 10000
Sample Testcase :
INPUT
GuVI
OUTPUT
uIGV

CODE:
// Getting input via STDIN
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let n=userInput[0];
let arr=[];
for(let i=0;i<n.length;i++){
    if(n[i]==='a' ||n[i]==='e' ||n[i]==='i' ||n[i]==='o' ||n[i]==='u' ||n[i]==='A' ||n[i]==='E' ||n[i]==='I' ||n[i]==='O' ||n[i]==='U'){
        arr.push(n[i]);
    }}
for(let i=0;i<n.length;i++){
    if(n[i]!=='a' &&n[i]!=='e' &&n[i]!=='i' &&n[i]!=='o' &&n[i]!=='u' &&n[i]!=='A' &&n[i]!=='E' &&n[i]!=='I' &&n[i]!=='O' &&n[i]!=='U'){
        arr.push(n[i]);
    }}
console.log(arr.join(""));
});
---------------------------------------------------------------------------------------------

9) Given an array N, sort it in ascending order till it reaches kth elements and after that 
sort it in descending order.
Input Size : N <= 100000
Sample Testcase :
INPUT
5 2
4 3 1 2 4
OUTPUT
3 4 4 2 1

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let [n,l]=userInput[0].split(" ").map(Number);
let num=userInput[1].split(" ").map(Number);
let arr1=[];
let arr2=[];
for(let i=0;i<n;i++){
    if(i<l){
        arr1.push(num[i]);
    }else(
        arr2.push(num[i]));
}
arr1.sort((a,b)=>a-b);
arr2.sort((a,b)=>b-a);
arr1=[...arr1,...arr2];
console.log(arr1.join(" "));
});
---------------------------------------------------------------------------------------------

10) Given a number N and array of N integers, print the difference between the indices of smallest
and largest number(if there are multiple occurances, consider the first occurance).
Input Size : |N| <= 1000000
Sample Testcase :
INPUT
5
3 5 4 4 7
OUTPUT
4

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
   const arr = userInput[1].split(" ").map(Number);
   let min=Math.min(...arr);
   let max=Math.max(...arr);
   let minIndex = arr.indexOf(min);
    let maxIndex = arr.indexOf(max);
    console.log(maxIndex-minIndex);
});
---------------------------------------------------------------------------------------------

13) Given a number N followed by a list of N numbers. Write a program to reverse the list 
and print the list.
Input Size : 1 <= N <= 10000
Sample Testcases :
INPUT
7
1 2 3 4 5 6 7
OUTPUT
7->6->5->4->3->2->1

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  let a=parseInt(userInput[0]);
  let b=userInput[1].split(" ").map(Number);
  let c=[];
  for(let i=a-1;i>=0;i--){
      c.push(b[i]);
      if(i!==0){
          c.push("->");
      }}
  console.log(c.join(""));
});

---------------------------------------------------------------------------------------------

14) Given base(B) and height(H) of a triangle find its area.
Input Size : N <= 1000000
Sample Testcase :
INPUT
2 4
OUTPUT
4

CODE:
// Getting input via STDIN
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let [a,b]=userInput[0].split(" ").map(Number);
console.log(1/2*(a*b));
});
---------------------------------------------------------------------------------------------

15) Print the position of first 1 from left to right, in binary representation of product of 2 
integers after the first one.
Sample Testcase :
INPUT
18 2
OUTPUT
4
CODE:
// Getting input via STDIN
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
    let[a,b]= userInput[0].split(" ").map(Number);
    let product=a*b;
    let binary = product.toString(2);
    let firstOneIndex = binary.indexOf('1') + 1;
  let nextOneIndex = binary.indexOf('1', firstOneIndex);
  console.log(nextOneIndex + 1);
});
---------------------------------------------------------------------------------------------

18) Given a number N print a right angled traingle structure with the starting level as single 1 
and every immediate proceeding level with 2 more additional ones than the previous level .
Repeat the pattern for N levels.
Input Size : N <= 1000
Sample Testcase :
INPUT
3
OUTPUT
1
1 1 1
1 1 1 1 1

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  let a = userInput[0];
  let arr=[];
  let num=1;
  for(let i=0;i<a;i++){
      for(j=1;j<=num;j++){
          arr.push(1);
      }
      console.log(arr.join(" "));
      num+=2;
      arr=[];
  }});
---------------------------------------------------------------------------------------------

19) Given 2 numbers A,B. Print the GCD of A! and B!.
Sample Testcase :
INPUT
4 2
OUTPUT
2

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  const [A, B] = userInput[0].split(" ").map(Number);
  const minVal = Math.min(A, B);

  function factorial(n) {
    let result = 1;
    for (let i = 2; i <= n; i++) {
      result *= i;
    }
    return result;
  }

  console.log(factorial(minVal));
});
---------------------------------------------------------------------------------------------

20) Given a string 'S' print the substring of maximum length which is not a palindrome.
If more than one solution is possible print the solution which you obtained by 
performing elimination at the end of the string
Input Size : 1 <= length <= 1000
Sample Testcases :
INPUT
ababababa
OUTPUT
abababab
INPUT
hello
OUTPUT
hello
CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  let s = userInput[0];
  const isPalindrome = (str) => {
    return str === str.split('').reverse().join('');
  };

  if (!isPalindrome(s)) {
    console.log(s);
    return;
  }


  for (let i = s.length - 1; i > 0; i--) {
    let substr = s.substring(0, i); 
    if (!isPalindrome(substr)) {
      console.log(substr);
      return;
    }
  }
  console.log(s.substring(0, s.length - 1));
});

---------------------------------------------------------------------------------------------

21) Given a number N and an array of N strings,Print yes, if all strings have atleast 
one vowel in them otherwise print no.
Input Size : N <= 1000
Sample Testcase :
INPUT
5
code
overload
vishal
sundar
anish
OUTPUT
yes

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let a=parseInt(userInput[0]);
let count=0;
for(let i=1;i<=a;i++){
    let str= userInput[i];
    if(/[aeiou]/i.test(str)){
       count+=1; 
    }}
if(count===a){
   console.log("yes"); 
}else{
    console.log("no");
}
});
---------------------------------------------------------------------------------------------

Given 2 numbers N,K and N arrays each of size K, print the elements that have appeared in 
all arrays,if any element are not same print '-1'.
Input Size : 2 <= N, K <= 100000
Sample Testcases :
INPUT
2 3
1 0 2
0 8 7
OUTPUT
0

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  let [n, k] = userInput[0].split(" ").map(Number);

  let arrays = [];
  for (let i = 1; i <= n; i++) {
    arrays.push(userInput[i].split(" ").map(Number));
  }

  let countMap = new Map();

  for (let arr of arrays) {
    let tempSet = new Set(arr);
    for (let num of tempSet) {
      countMap.set(num, (countMap.get(num) || 0) + 1);
    }
  }

  let result = [];
  for (let [key, val] of countMap) {
    if (val === n) {
      result.push(key);
    }
  }

  if (result.length === 0) {
    console.log(-1);
  } else {
    result.sort((a, b) => a - b); // Optional: to print in ascending order
    console.log(result.join(" "));
  }
});

---------------------------------------------------------------------------------------------

23) Given a number n followed by n numbers. Find the numbers which are equal to their 
index value and print them in sorted order. If no such numbers are present print '-1' without quotes.
Input Size : 1 <= n <= 100000
Sample Testcases :
INPUT
6
6 7 3 3 4 5
OUTPUT
3 4 5

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let a=parseInt(userInput[0]);
let b= userInput[1].split(" ").map(Number);
let arr=[];
for(let i=0;i<a;i++){
    if(i===b[i]){
        arr.push(b[i]);
    }}
if(arr.length===0){
  console.log(-1);  
}else{
   console.log(arr.join(" ")); 
}
});
---------------------------------------------------------------------------------------------

24) Given a number N, find the smallest number which is greater than N with the same digits in N. 
If N is the greatest digit print 'impossible'.
Input Size : 1 <= N <= 1000000000000000000
Sample Testcases :
INPUT
123
OUTPUT
132

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data.trim());
});

inp.on("close", () => {
  let digits = userInput[0].split('').map(Number);
  let i = digits.length - 2;

  while (i >= 0 && digits[i] >= digits[i + 1]) {
    i--;
  }

  if (i < 0) {
    console.log("impossible");
    return;
  }

  let j = digits.length - 1;
  while (digits[j] <= digits[i]) {
    j--;
  }

  [digits[i], digits[j]] = [digits[j], digits[i]];

  let left = i + 1;
  let right = digits.length - 1;
  while (left < right) {
    [digits[left], digits[right]] = [digits[right], digits[left]];
    left++;
    right--;
  }

  console.log(digits.join(''));
});

---------------------------------------------------------------------------------------------

27) Given a number N and an array of N elements, print the number of lucky numbers in the array.
Lucky number: N*I is also present in the array then the number is lucky where N is the number of 
elements in the array and I is the position of the element.(1 based indexing)
Input Size : 1 <= N, I <= 100000
Sample Testcases :
INPUT
5
1 2 3 4 5
OUTPUT
1

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let N=parseInt(userInput[0]);
let arr=userInput[1].split(" ").map(Number);
let numSet = new Set(arr);
let luckyCount=0;
for (let i = 1; i <= N; i++) {
    if (numSet.has(N * i)) {
      luckyCount++;
    }}
  console.log(luckyCount);

});
---------------------------------------------------------------------------------------------

28) Given a number N followed by an array of N numbers. Another number D is given. 
Rotate the array D times and print the array.
Input Size : N <= 100000, D<=100000
Sample Testcase :
INPUT
4 1
3 2 4 1
OUTPUT
2 4 1 3

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
const [N, D] = userInput[0].split(" ").map(Number);
  let arr = userInput[1].split(" ").map(Number);
  
  let rotations = D % N;
  let rotatedArr = arr.slice(rotations).concat(arr.slice(0, rotations));
    console.log(rotatedArr.join(" "));
});
---------------------------------------------------------------------------------------------

30) Given a string 'S', sort the characters based on the frequency(highest and lowest) 
and print the resultant string.(Note:If the frequency of different character is same then 
sort based on alphabetical order).
Input Size : 1 <= S <= 100000
Sample Testcases :
INPUT
aabbba
OUTPUT
aaabbb

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let a=userInput[0].split("").sort("");
console.log(a.join(""));
});
---------------------------------------------------------------------------------------------

32) Given a sentence S.check whether it is in camelcase.print 'yes' if it is in camelcase 
otherwise print 'no'.
input size : |s| <= 100000
Sample Testcase :
INPUT
CodekataChallenge
OUTPUT
yes

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let a= userInput[0].split("");
let istrue=true;
for(let i=1;i<a.length;i++){
    if(a[i]===a[i].toUpperCase()){
        console.log("yes");
        istrue=false;
        break;
    }}
if(istrue){
    console.log("no");
}});
---------------------------------------------------------------------------------------------

34) Each character of the alphabet is matched to a number. For example A is mapped to 1 , 
b to 2 so on z to 26. The reverse mapping is also true. 
1 is mapped to a , 2 to b 3 to c and so on z to 26. 
So a number 12258 can be translated to abbeh , aveh , abyh , lbeh , and lyh , 
so there are 5 ways to translate 12258. Given a number N , 
write a program to print the number of ways to do this.
Input Size : 1 <= N <= 100000
Sample Testcases :
INPUT
12258
OUTPUT
5

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

let userInput = [];

inp.on("line", (data) => {
  userInput.push(data.trim());
});

inp.on("close", () => {
  const numStr = userInput[0];
  const n = numStr.length;
  const dp = new Array(n + 1).fill(0);
  dp[0] = 1;

  for (let i = 1; i <= n; i++) {
    if (numStr[i - 1] !== '0') {
      dp[i] += dp[i - 1];
    }

    if (i >= 2) {
      const twoDigit = parseInt(numStr.substring(i - 2, i));
      if (twoDigit >= 10 && twoDigit <= 26) {
        dp[i] += dp[i - 2];
      }
    }
  }
  console.log(dp[n]);
});

---------------------------------------------------------------------------------------------

Given a number N followed by N numbers. Out of these N numbers some of them are repeated. Write a program to find the number which is repeated and print the repeated numbers in sorted order. If no numbers are repeated print "unique".
Input Size : 1 <= N <= 100000
Sample Testcase :
INPUT
7
1 2 3 2 3 4 3
OUTPUT
2 3

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data.trim());
});

inp.on("close", () => {
  const N = parseInt(userInput[0]);
  const arr = userInput[1].split(" ").map(Number);
  
  const countMap = {};
  const repeated = [];

  for (let num of arr) {
    countMap[num] = (countMap[num] || 0) + 1;
  }

  for (let key in countMap) {
    if (countMap[key] > 1) {
      repeated.push(Number(key));
    }
  }

  if (repeated.length === 0) {
    console.log("unique");
  } else {
    repeated.sort((a, b) => a - b);
    console.log(repeated.join(" "));
  }
});

---------------------------------------------------------------------------------------------
35) Given a number N followed by N numbers. All the numbers in the given input appear 
twice except for one number(ie one number appears only once in the given input). 
Find the number which appears only once.
Input Size : 1 <= N <= 100000
Sample Testcases :
INPUT
5
1 2 1 3 2
OUTPUT
3

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let a=parseInt(userInput[0]);
let n=userInput[1].split(" ").map(Number).sort((a,b)=>a-b);
let count=0;
for(let i=0;i<a;i+=2){
    if(n[i]!==n[i+1]){
        console.log(n[i]);
        count++;
    }}
});
---------------------------------------------------------------------------------------------

36) Given a number N followed by N numbers(negative or positive) print the maximum sum of 
any subarray of the array.
Input Size : 1 <= N <= 100000
Sample Testcases :
INPUT
7
1 2 3 4 5 6 7
OUTPUT
28

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  const N = parseInt(userInput[0]);
  const arr = userInput[1].split(" ").map(Number);

  let maxCurrent = arr[0];
  let maxGlobal = arr[0];

  for (let i = 1; i < N; i++) {
    maxCurrent = Math.max(arr[i], maxCurrent + arr[i]);
    maxGlobal = Math.max(maxGlobal, maxCurrent);
  }

  console.log(maxGlobal);
});

---------------------------------------------------------------------------------------------

43) Given a string S consisting of 2 words reverse the order of two words .
Input Size : |S| <= 10000000
Sample Testcase :
INPUT
hello world
OUTPUT
world hello

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let l=userInput[0].split(" ");
let temp;
temp=l[0];
l[0]=l[1];
l[1]=temp;
console.log(l.join(" "));
});
---------------------------------------------------------------------------------------------

45) Given a string S of length N, find whether the given string is a palindrome using stack or 
linked list and print 'yes' otherwise print 'no'.
Input Size : 1 <= N <= 100000
Sample Testcases :
INPUT
GuviGeek
OUTPUT
no

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let a=userInput[0];
let b=a.split("").reverse().join("");
if(a===b){
    console.log("yes");
}else{
    console.log("no");
}
});
---------------------------------------------------------------------------------------------

48) You have been given stock prices for next N days. Find out: max profit in buying and 
selling 1 share Condition: Share must be sold any day after buying date. 
Given a number N followed by N integers print the maximum profit.
For example: Share price in thousands 5 1 4 6 7 8 4 3 7 9
Max benefit 9 – 1 = 8 thousand
Input Size : N <= 100000
Sample Testcase :
INPUT
10
5 1 4 6 7 8 4 3 7 9
OUTPUT
8

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data.trim());
});

inp.on("close", () => {
  const N = parseInt(userInput[0]);
  const prices = userInput[1].split(" ").map(Number);

  let minPrice = prices[0];
  let maxProfit = 0;

  for (let i = 1; i < N; i++) {
    if (prices[i] < minPrice) minPrice = prices[i];
    else maxProfit = Math.max(maxProfit, prices[i] - minPrice);
    
  }
  console.log(maxProfit);
});

---------------------------------------------------------------------------------------------

51) Divide two given integers A and B without using multiplication, division and mod operator. 
If it is overflow, return MAX_INT.
Sample Testcases :
INPUT
10 5
OUTPUT
2

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
   let [a,b]=userInput[0].split(" ");
   let count=0;
   while(a>0){
       a-=b;
       count+=1;
   }
   console.log(count);
});

---------------------------------------------------------------------------------------------

53) Given a number N, print the smallest number with sum of digits N.
Input Size : 1 <= N <= 100000
Sample Testcase :
INPUT
12
OUTPUT
39

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  let N = parseInt(userInput[0]);
  let digits = [];

  while (N > 9) {
    digits.push(9);
    N -= 9;
  }

  if (N > 0) {
    digits.push(N);
  }
  digits.reverse();

  console.log(digits.join(""));
});
---------------------------------------------------------------------------------------------

54) Given a string S of length N, rearrange the letters in the string to form a new 
string X which is lexicographically greater than current string
(If many answers are possible, output lexicographically smallest one). 
If no string exists print '-1'.
Input Size : 1 <= N <= 100000
Sample Testcase :
INPUT
hello
OUTPUT
helol

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data.trim());
});

inp.on("close", () => {
  const s = userInput[0].split('');
  const n = s.length;

  let i = n - 2;
  while (i >= 0 && s[i] >= s[i + 1]) {
    i--;
  }

  if (i === -1) {
    console.log("-1");
    return;
  }

  let j = n - 1;
  while (s[j] <= s[i]) {
    j--;
  }

  [s[i], s[j]] = [s[j], s[i]];

  const left = s.slice(0, i + 1);
  const right = s.slice(i + 1).reverse();

  const result = [...left, ...right].join('');
  console.log(result);
});
---------------------------------------------------------------------------------------------

55) Given two numbers N,K(N>=K) and an array of N elements, write a program to find the 
Kth largest element.
Input Size : 1 <= K <= N <= 100000
Sample Testcases :
INPUT
6 2
1 2 3 4 5 6
OUTPUT
5

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let [n,k]=userInput[0].split(" ").map(Number);
let a=userInput[1].split(" ").map(Number).sort((a,b)=>b-a);
count=1;
for(let i=1;i<n;i++){
    if(a[i]!==a[i-1]){
      count+=1;  
       if(count===k) {
           console.log(a[i]);
           break;
       }}}
});
---------------------------------------------------------------------------------------------

58) Given a linked list(where each node has a character)  remove the duplicate character 
and maintain the same order.
Input: H->e->l->l->o->w->o->r->l->d->h->i
Output:  H->e->l->o->w->r->d->h->i

Explanation:
The letters l,o are duplicated so it is mentioned only once in the output.
Note: The characters are case sensitive
//Node structure in C/C++
struct Node

{

    int data;

    struct Node *next;

};

//Node class structure
class LinkedList {
    static Node head;

    static class Node {

        int data;

        Node next;

        Node(int d) {

            data = d;

            next = null;

        }

    }

Input Description:
Characters of a String in linked list format

Output Description:
Characters of a String in linked list format after removing the repeated character

Sample Input :
H->e->l->l->o->w->o->r->l->d->h->i
Sample Output :
 H->e->l->o->w->r->d->h->i

 CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let a=userInput[0].split("");
let arr=[];
for(let i=0;i<a.length;i+=3){
    if(!arr.includes(a[i])){
        if(i!==a.length-1){
            arr.push(a[i]);
            arr.push("->");
        }else{
            arr.push(a[i]);
        }}}
  console.log(arr.join(""));
});
---------------------------------------------------------------------------------------------

60) Given 2 numbers N and K followed by N numbers such that sum of two pairs in the N numbers 
results K value, if it exist print 'yes' otherwise 'no'.
Input Size : N<=100000
Example:
INPUT
4 4
1 2 2 4
OUTPUT
yes

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let [n,k]=userInput[0].split(" ").map(Number);
let val=userInput[1].split(" ").map(Number);
let count=0;
for(let i=0;i<n;i++){
    for(let j=i+1;j<n-1;j++){
        if(val[i]+val[j]===k){
            console.log("yes");
            count++;
            break;
        }}}
if(count==0){
    console.og("no");
}
});
---------------------------------------------------------------------------------------------
61) Given a number N, obtain the smallest number after deleting K digits from N.
Input Size : 1<=N<=100000
Example:
INPUT
213 1
OUTPUT
13

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  let [numStr, kStr] = userInput[0].split(" ");
  let k = parseInt(kStr);
  let stack = [];

  for (let digit of numStr) {
    while (stack.length && k > 0 && stack[stack.length - 1] > digit) {
      stack.pop();
      k--;
    }
    stack.push(digit);
  }
  while (k > 0) {
    stack.pop();
    k--;
  }
  let result = stack.join("").replace(/^0+/, "") || "0";
  console.log(result);
});

---------------------------------------------------------------------------------------------

63) Write a program to give the following output for the given string S of size N.(character containing even number of occurences should be elaborated else print the same format)
Eg 1: Input: a1b10
Output: a1bbbbbbbbbb
Eg: 2: Input: b3c6d15
Output: b3ccccccd15
Input Size : 1 <= N <= 100000
Sample Testcases :
INPUT
a1b10
OUTPUT
a1bbbbbbbbbb

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin,
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  const input = userInput[0];
  let result = "";
  let i = 0;

  while (i < input.length) {
    const char = input[i];
    i++;

    let numStr = "";
    while (i < input.length && !isNaN(input[i])) {
      numStr += input[i];
      i++;
    }

    const count = parseInt(numStr);
    
    if (count % 2 === 0) result += char.repeat(count);
    else result += char + count;
    
  }
  console.log(result);
});

---------------------------------------------------------------------------------------------

65) Given a number N, How many ways are there to represent it as sum of 2 primes.
Input Size : 1 <= N <= 1000
Sample Testcase :
INPUT
10
OUTPUT
2
Explanation:(7+3),(5+5)

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  const N = parseInt(userInput[0]);

  // Function to check if a number is prime
  function isPrime(n) {
    if (n < 2) return false;
    for (let i = 2; i <= Math.sqrt(n); i++) {
      if (n % i === 0) return false;
    }
    return true;
  }

  let count = 0;

  for (let i = 2; i <= N / 2; i++) {
    let j = N - i;
    if (isPrime(i) && isPrime(j)) {
      count++;
    }
  }

  console.log(count);
});

---------------------------------------------------------------------------------------------

68) Given a number N and N strings of length atmost M, print the longest common prefix.
Input Size : 1<=N, M<=100000
Example:
INPUT
2
Vishal
Vidharba
OUTPUT
Vi

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let a=userInput[1].split("");
let b=userInput[2].split("");
let arr=[];
for(let i=0;i<a.length;i++){
    if(a[i]===b[i]){
        arr.push(a[i]);
    }else{
        break;
    }}
console.log(arr.join(""));
});
---------------------------------------------------------------------------------------------

69) Once detective saikat was solving a murder case. While going to the crime scene he took the stairs and saw that a number is written on every stair. He found it suspicious and decides to remember all the numbers that he has seen till now. While remembering the numbers he found that he can find some pattern in those numbers. So he decides that for each number on the stairs he will note down the sum of all the numbers previously seen on the stairs which are smaller than the present number. Calculate the sum of all the numbers written on his notes diary.
Input Size : 1<=N<=1000
Example:
INPUT
3
1 2 3
OUTPUT
4(0+1+1+2)

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  const N = parseInt(userInput[0]);
  const nums = userInput[1].split(' ').map(Number);

  let total = 0;

  for (let i = 0; i < N; i++) {
    let current = nums[i];
    for (let j = 0; j < i; j++) {
      if (nums[j] < current) total += nums[j];
    }
  }
  console.log(total);
});

---------------------------------------------------------------------------------------------

71) Given a number N, find the sum of prime numbers that end with 3 from 2 to N.
Input Size : N <= 100000
Sample Testcase :
INPUT
5
OUTPUT
3

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  const N = parseInt(userInput[0]);
  let sum = 0;

  function isPrime(num) {
    if (num < 2) return false;
    for (let i = 2; i <= Math.sqrt(num); i++) {
      if (num % i === 0) return false;
    }
    return true;
  }

  for (let i = 2; i <= N; i++) {
    if (isPrime(i) && i % 10 === 3) {
      sum += i;
    }
  }

  console.log(sum);
});
---------------------------------------------------------------------------------------------

75) Maxwell wants to buy an apartment in a new house at Line Avenue of Metropolis. 
The house has n apartments that are numbered from 1 to n and are arranged in a row. 
Two apartments are adjacent if their indices differ by 1. 
Some of the apartments can already be inhabited, others are available for sale. 
Maxwell often visits his neighbors, so apartment is good for him if it is available 
for sale and there is at least one already inhabited apartment adjacent to it. 
Maxwell knows that there are exactly k already inhabited apartments, 
but he doesn't know their indices yet. 
Find out what could be the minimum possible and the maximum possible number of 
apartments that are good for Maxwell.
Input Size : N<=K<=1000000000
Example:
INPUT
6 3
OUTPUT
1 3

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

let userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  let [n, k] = userInput[0].split(" ").map(Number);
  
  let min = (n === k) ? 0 : 1;
  let max = Math.min(2 * k, n - k);

  console.log(`${min} ${max}`);
});

---------------------------------------------------------------------------------------------

83) Given a number N and an array of N elements, find the number of triplets ai < aj < ak (i < j < k) in the array.Don't change the given sequence and if it is not possible to form triplet print '-1'.
Input Size : 3<=N<=1000
Example:
INPUT:
4
1 2 3 4
OUTPUT:
4

CODE: 
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

let userInput = [];

inp.on("line", (data) => {
  userInput.push(data.trim());
});

inp.on("close", () => {
  const n = parseInt(userInput[0]);
  const arr = userInput[1].split(" ").map(Number);

  if (n < 3) {
    console.log(-1);
    return;
  }

  let totalTriplets = 0;

  for (let j = 1; j < n - 1; j++) {
    let countLeft = 0;
    let countRight = 0;

    for (let i = 0; i < j; i++) {
      if (arr[i] < arr[j]) countLeft++;
    }

    for (let k = j + 1; k < n; k++) {
      if (arr[k] > arr[j]) countRight++;
    }

    totalTriplets += countLeft * countRight;
  }
  console.log(totalTriplets > 0 ? totalTriplets : -1);
});

---------------------------------------------------------------------------------------------