2) You are given an array of ids of prisoners. The jail authority found that there are some prisoners 
of same id. Your task is to help the authority in finding the common ids.

Input Description:
First line contains a number ‘n’ representing no of prisoners. 
Next line contains n space separated numbers.

Output Description:
Print the ids which are not unique. Print -1 if all ids are unique

Sample Input :
7
1 1 11 121 131 141 98
Sample Output :
1

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
 
 let a=parseInt(userInput[0]);
 let n=userInput[1].split(" ").map(Number);
let arr=[];
 for(let i=0;i<a;i++){
     if(n[i]!==-1){
         for(let j=i+1;j<a;j++){
         if(n[i]===n[j]){
             arr.push(n[i]);
             n[j]=-1;
         }}}}
(arr.length===0)? console.log(-1): console.log(arr.join(" "));
});
---------------------------------------------------------------------------------------------

3) You are a passport issuer, but due to some problems in the system, there are redundant  
passport numbers. Your task is to delete all the duplicate passport numbers. 
You are given a list of passport numbers.

Input Description:
You are given length of list.Second line,You are given with a list.

Output Description:
Print the list of passport numbers without duplicates.

Sample Input :
5
A23 B56 B56 C79 D16
Sample Output :
A23 B56 C79 D16

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  let a= parseInt(userInput[0]);
  let b=userInput[1].split(" ");
  let arr=[];
  for(let i=0;i<a;i++){
      if(!arr.includes(b[i])){
          arr.push(b[i]);
      }}
 console.log(arr.join(" "));
});
---------------------------------------------------------------------------------------------

7) Pk finds it difficult to judge the minimum element in the list of elements given to him. Your task is to develop the algorithm in order to find the minimum element.

Note:Don’t use sorting

Input Description:
You are given ‘n’ number of elements. Next line contains n space separated numbers.

Output Description:
Print the minimum element

Sample Input :
5
3 4 9 1 6
Sample Output :
1

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  let a=userInput[0];
  let val=userInput[1].split(" ").map(Number);
  let small=val[0];
  for(let i=1;i<a;i++){
      if(small>val[i]){
          small=val[i];
      }
  }
  console.log(small);
});
---------------------------------------------------------------------------------------------

9) Given a number N, print the odd digits in the number(space seperated) or print -1 if there is no odd digit in the given number.
Input Size : N <= 100000
Sample Testcase :
INPUT
2143
OUTPUT
1 3

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
   let a=userInput[0].split("");
   let odd=[];
   for(let i=0;i<a.length;i++){
    if(a[i]%2===1){
        odd.push(a[i]);
    }   
   }
if(odd.length===0){
    console.log("-1");
}
 console.log(odd.join(" "));
});
---------------------------------------------------------------------------------------------

10) You are given with an circular array .Your task is calculate the difference between two consecutive
 number. And if difference is greater than ‘k’, print 1 else print 0
Input Description:
You are given two numbers ‘n’, ’m’. Next line contains n space separated integers.

Output Description:
Print 1 if the difference is greater than ‘m’.

Sample Input :
5 15
50 65 85 98 35
Sample Output :
0 1 0 1 0

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
 let [n,k]=userInput[0].split(" ").map(Number);
 let a=userInput[1].split(" ").map(Number);
 let arr=[];
 for(let i=0;i<n-1;i++){
     (Math.abs(a[i]-a[i+1])>k)? arr.push(1):arr.push(0);
 }
 (Math.abs(a[n-1]-a[0])>k)? arr.push(1): arr.push(0);
 console.log(arr.join(" "));
});
---------------------------------------------------------------------------------------------

13) Rajesh and Ram are having a conflict on the maximum marks that they have scored in all the exams conducted in the past year. The one having scored the maximum gets a treat from the other. They decide to go through their test papers and record their highest marks. You are Rajesh’s best friend and as he has tutions to attend, he gives you all his test papers and asks you to find out the maximum marks that he has scored among all the marks in all exams. He promises you a treat if he wins the bet with Ram. Help Rajesh find out his highest marks.

Constraints:

1 <= N <= 10

0 <= A[] <= 100

Input Description:
First line contains count of marks. Next line is the list of marks obtained by Rajesh.

Output Description:
Highest marks obtained by Rajesh.

Sample Input :
3
82 96 72
Sample Output :
96

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let a= parseInt(userInput[0]);
let arr=userInput[1].split(" ").map(Number);
  let big=arr[0];
  for(let i=1;i<=arr.length-1;i++){
      if(big<arr[i]){
          big=arr[i];
      }
  }
console.log(big);
});
---------------------------------------------------------------------------------------------

14) Mr.Stark wants to order the employee ids, which are recorded in a 2D matrix, in ascending order. He wants to do it so as to allot a new id to a person who joins as a fresher. You are the CTO of the Stark industries and you are asked by Mr.Stark to sort the data.
 

Input Description:
Dimensions of the matrix m and n, followed by the elements of the matrix.

Output Description:
Matrix sorted in ascending order

Sample Input :
3 3
87 21 34
89 32 78
12 23 45
Sample Output :
12 21 23
32 34 45
78 87 89

CODE:

const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let a=userInput[0].split(" ").map(Number);
let row=a[0];
let col=a[1];
let arr=[];
let ans=[];
let k=0;
for(let i=1;i<=row;i++){
arr.push(...userInput[i].split(" "));
}
arr.sort();
for(let i=0;i<row;i++){
    for(let j=0;j<col;j++){
        ans.push(arr[k]);
       k++; 
    }
    
    console.log(ans.join(" "));
    ans=[];
}
});
---------------------------------------------------------------------------------------------

16)Ria is a 5 year old girl. Her mother wants to teach her how to sort words in the same order that they appear in a dictionary. She decides to write a program to sort a given set of strings based on their alphabetical order. Help Ria’s mother to complete the program.

Input Description:
A set of N strings

Output Description:
Alphabetically sorted set of strings

Sample Input :
3
InfinityWar EndGame Avengers
Sample Output :
Avengers EndGame InfinityWar

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let num=userInput[0];
let word=userInput[1].split(" ").sort().join(" ");
  console.log(word);
});
---------------------------------------------------------------------------------------------

18) You are an intern at GUVI and the company wants to organise its data and delete unnecessary extra 
storage elements used. You are given k arrays of unequal dimensions. 
Sort the k arrays individually and concatenate them.
 
Input Description:
First line contains the number of arrays. Subsequent lines contain the size of the array 
followed by the elements of the array.

Output Description:
An array containing the sorted elements of k sorted arrays

Sample Input :
3
2
98 12
6
1 2 3 8 5 9
1
11
Sample Output :
12 98 1 2 3 5 8 9 11

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  
  let a=parseInt(userInput[0]);
  
  let arr=[];
  for(let i=2;i<=a*2;i=i+2){
      let val=userInput[i].split(" ").map(Number).sort((a,b)=>a-b).join(" ");
     arr.push(val);
  }
  console.log(arr.join(" "));
});
---------------------------------------------------------------------------------------------

19) Given a string S, print it after changing the middle element to * (if the length of the string is even, change the 2 middle elements to *).
Sample Testcase :
INPUT
hello
OUTPUT
he*lo

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let a=userInput[0].split("");
if(a.length%2===1){
    a.splice(a.length/2,1,"*")
}else{
    a.splice(a.length/2-1,2,"*","*");
}
console.log(a.join(""));
});
---------------------------------------------------------------------------------------------

20) You are given two arrays of equal length. Your task is to merge the two arrays then sort them too and then find the sum of two middlemost elements.

Input Description:
You are given a number ‘n’. Then Next line contains first list of 'n' separated numbers.Third line contains second list of 'n' space separated numbers.

Output Description:
Print the sum of two middle elements

Sample Input :
5
1 9 16 25 46
2 3 4 5 6
Sample Output :
11

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let a= parseInt(userInput[0]);
let arr1= userInput[1].split(" ").map(Number);
let arr2=userInput[2].split(" ").map(Number);
let arr3=[...arr1,...arr2];
arr3=arr3.sort((a,b)=>a-b);
let center=arr3.length/2;
let val1=arr3[Math.floor(center)];
let val2=arr3[Math.floor(center)-1];
console.log(val1+val2);
});
---------------------------------------------------------------------------------------------

22) You are given with two arrays. Your task is to merge the array such that first array is in ascending order and second one in descending order.

Input Description:
First line contains two integer ‘n’ and ‘m’. ‘n’ denotes length of array 1 and ‘m’ of array 2.Next line contains n space separated numbers and third line contains ‘m’ space separated numbers

Output Description:
Print a single array in desired order

Sample Input :
3 3
23 15 16
357 65 10
Sample Output :
15 16 23 357 65 10

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  let len=userInput[0].split(" ");
let a=userInput[1].split(" ").map(Number);
let b=userInput[2].split(" ").map(Number);
a=a.sort((a,b)=>a-b);
b=b.sort((a,b)=>b-a);
a=[...a,...b];
console.log(a.join(" "));
});
---------------------------------------------------------------------------------------------

24) you are given with array of numbers.you have to find whether array is beautiful or not. A beautiful array is an array whose sum of all numbers is divisible by 2, 3 and 5

Input Description:
You are given a number ‘n’ denoting the size of array.Next line contains n space separated numbers.

Output Description:
Print 1 if array is beautiful and 0 if it is not

Sample Input :
5
5 25 35 -5 30
Sample Output :
1

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
    let a=userInput[0];
    let b= userInput[1].split(" ").map(Number);
    let c=0;
    for(let i=0;i<a;i++){
        c+=b[i];
    }
    if(c%2 === 0 && c%3 === 0 && c%5 === 0){
        console.log(1);
    }else{
        console.log(0);
    }
});
---------------------------------------------------------------------------------------------

25) Given 2 numbers N and K followed by elements of N .Print 'yes' if K exists else print 'no'.
Sample Testcase :
INPUT
4 2
1 2 3 3
OUTPUT
yes

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {

  let a = userInput[0].split(" ");
  let N=a[0];
  let K=a[1];
  let b = userInput[1].split(" ");
let count =0;
  for(let i=0;i<b.length;i++){
      if(b[i]===K){
          count=1;
          break;
      }
  }
  if(count!==0){
      console.log("yes");
  }else{
      console.log("no");
  }
});
---------------------------------------------------------------------------------------------

27) Ramesh is a student and wants to find out if there is any other student in his class who has got the same marks as his, in maths. Help him to find out.
 

Input Description:
First line contains the number of students in the class followed by Ramesh’s mark. Second line contains the marks of all students in the class.

Output Description:
Index of student who got mark same as Ramesh’s mark. If no such mark exists, return -1.

Sample Input :
2 10
1 2
Sample Output :
-1

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let a=userInput[0].split(" ").map(Number);
let stu=a[0];
let mark=a[1];
let b=userInput[1].split(" ").map(Number);
let count=0;
for(let i=0;i<stu;i++){
    if(b[i]===mark){
        count++;
    }
}
if(count===0){
    console.log(-1);
}else{
    console.log(count);
}
});
---------------------------------------------------------------------------------------------

28) Given a string S, print it without using semicolon in your program.
Sample Testcase :
INPUT
hello world
OUTPUT
hello world

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  let a=userInput[0];
  console.log(a);
});
---------------------------------------------------------------------------------------------

29) A person saves his monthly saving according to given schema. He saves same amount of money which is equal to the money saved in immediate previous two months. Assume, initially he saved 1000 rupees and in first month he saved another 1000. Your task is to tell how much he had totally saved at the end of ‘n’ months


Input Description:
You will be given a number ‘n’->No. of months

Output Description:
Print the total savings at the end of ‘n’ months

Sample Input :
1
Sample Output :
2000

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let n=parseInt(userInput[0]);
  if (n === 0) {
    console.log(1000);
    return;
  }

let lastSavings=1000;
let currentSavings=1000;
let totalSavings=2000;
for(let i=2;i<=n;i++){
    let newSavings=lastSavings+currentSavings;
    totalSavings+=newSavings;
    lastSavings=currentSavings;
    currentSavings=newSavings;
}
console.log(totalSavings);
});
---------------------------------------------------------------------------------------------

30) You are given a number with duplicate digits your task is to remove the immediate duplicate digits and print the result


Input Description:
You are given a long string of digits

Output Description:
Print the desired result print -1 if result length is 0

Sample Input :
1331
Sample Output :
11

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  let a=userInput[0].split("").map(Number);
  let arr=[];
  let val=-1;
  for(let i=0;i<a.length;i++){
      if(i>val){
           if(a[i]!==a[i+1]){
          arr.push(a[i]);
      }else{
          val=i+1;
      }}}
  if(arr.length===0){
      console.log(-1);
  }else{
      console.log(arr.join(""));
  }
});
---------------------------------------------------------------------------------------------
32) Given a number N print a right angled traingle structure with the starting level as single 1 and every immediate proceeding level with 2 more additional ones than the previous level .Repeat the pattern for N levels.
Input Size : N <= 1000
Sample Testcase :
INPUT
3
OUTPUT
1
1 1 1
1 1 1 1 1

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  let a = userInput[0];
  let arr=[];
  let num=1;
  for(let i=0;i<a;i++){
      for(j=1;j<=num;j++){
          arr.push(1);
      }
      console.log(arr.join(" "));
      num+=2;
      arr=[];
  }
});
---------------------------------------------------------------------------------------------

33) Given a number N, print the sum of squares of all its digits.
Input Size : 1 <= N <= 100000
Sample Testcase :
INPUT
12
OUTPUT
5

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  let inputStr = userInput[0].trim();
  let sum = 0;
  for (let char of inputStr) {
    let digit = parseInt(char);
    sum += digit * digit;
  }
  console.log(sum);
});

---------------------------------------------------------------------------------------------

34) Given a number N print a right angled traingle structure with the starting level as single 1 and every immediate proceeding level with 2 more additional ones than the previous level .Repeat the pattern for N levels.
Input Size : N <= 1000
Sample Testcase :
INPUT
3
OUTPUT
1
1 1 1
1 1 1 1 1

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  let a = userInput[0];
  let arr=[];
  let num=1;
  for(let i=0;i<a;i++){
      for(j=1;j<=num;j++){
          arr.push(1);
      }
      console.log(arr.join(" "));
      num+=2;
      arr=[];
  }
});
---------------------------------------------------------------------------------------------

35)Given a sentence and string S, find how many times S occurs in the given sentence.If S is not found in the sentence print -1
Input Size : |sentence| <= 1000000(complexity O(n)).
Sample Testcase :
INPUT
I enjoy doing codekata
codekata
OUTPUT
1

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  let a = userInput[0].split(" ");
  let s=userInput[1]
  let count=0;
  for(let i=0;i<a.length;i++){
      if(a[i]===s){
          count+=1;
      }
  }
  if(count===0){
      console.log("-1");
  }else{
      console.log(count);
  }
});
---------------------------------------------------------------------------------------------

36) You are given with an array. For each element present in the array your task is to print the next smallest than that number. If it is not smallest print -1


Input Description:
You are given a number ‘n’ representing size of array. And n space separated numbers.

Output Description:
Print the next smallest number present in array and -1 if no smallest is present

Sample Input :
7
10 7 9 3 2 1 15
Sample Output :
7 3 3 2 1 -1 -1

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let a=parseInt(userInput[0]);
let n=userInput[1].split(" ").map(Number);
let arr=[];
for(let i=0;i<a;i++){
    count=0;
    for(let j=i+1;j<a;j++){
        if(n[i]>n[j]){
            arr.push(n[j]);
            count++;
            break;
        }}
    if(count===0){
        arr.push(-1);
    }}
console.log(arr.join(" "));
});
---------------------------------------------------------------------------------------------

37) You are given given task is to print whether array is ‘majestic’ or not.A ‘majsetic’ array is an array whose sum of first three number is equal to last three number.

Input Description:
You are given a number ‘n’,Next line contains ‘n’ space separated

Output Description:
Print 1 if array is majestic and 0 if it is not

Sample Input :
7
1 2 3 4 6 0 0
Sample Output :
1

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  let n=userInput[0];
let a=userInput[1].split(" ").map(Number);

let last=a[n-1]+a[n-2]+a[n-3];
let first=a[0]+a[1]+a[2];
if(first===last){
    console.log(1);
}else{
    console.log(0);
}
});
---------------------------------------------------------------------------------------------

40) Prakash is bored and wants to spends his time. He starts rolling a die and observes the value 
that is shown. He rolls the dice N times and observes that just one number appears distinctly, 
all the others get repeated or does not appear at all. Find out which was the number that 
puzzled Prakash for sometime, after which he realised that it was just a coincidence.

Constraints
0 <   N  <= 100
0 <= A[i] <= 100
 
Input Description:
The first line contains a positive integer N, denoting the size of the array. 
The second line contains N positive integers, denoting the face values that appeared 
when the die was rolled.

Output Description:
Print out the singly occurring number.

Sample Input :
5
1 1 2 5 5
Sample Output :
2

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let n=parseInt(userInput[0]);
let a=userInput[1].split(" ").map(Number).sort((a,b)=>a-b);
let arr=[];
let count=1;
let fir=a[0];
for(let i=1;i<n;i++){
    if(fir===a[i]) count++;
else{
    if(count===1) arr.push(fir);
    count=1;
    fir=a[i];
}}
if(arr.length===0) console.log(0);
else console.log(arr.join(" ")); 
});
---------------------------------------------------------------------------------------------

43) Prakash is bored and wants to spends his time. He starts rolling a die 
(having the face values as 1, 2, 3, 4, 8, 15, 7, 9) and observes that some of the values keep repeating. Also while rolling n times, some face appear once only. 
Find the number on its face.
Constraints
0 <   N  <= 100
0 <= A[i] <= 100


Input Description:
The first line contains a positive integer N, denoting the size of the array. The second line contains N positive integers, denoting the face values that appeared when the die was rolled.

Output Description:
Print out the singly occurring number. print 0 if no numbers are repeating.

Sample Input :
5
1 1 2 5 5
Sample Output :
2

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let n=parseInt(userInput[0]);
let a=userInput[1].split(" ").map(Number).sort((a,b)=>a-b);
let arr=[];
let count=1;
let fir=a[0];
for(let i=1;i<n;i++){
    if(fir===a[i]) count++;
else{
    if(count===1) arr.push(fir);
    count=1;
    fir=a[i];
}}
if(arr.length===0) console.log(0);
else console.log(arr.join(" ")); 
});
---------------------------------------------------------------------------------------------

45) Given a string S, print 2 strings such that first string containing all characters in odd position(s) and other containing all characters in even position(s).
Sample Testcase :
INPUT
XCODE
OUTPUT
XOE CD

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let a=userInput[0].split("");
let odd=[];
let even=[];
for (let i=0;i<a.length;i++){
    if(i%2===0){
        odd.push(a[i]);
    }else{
        even.push(a[i]);
    }
}
console.log(odd.join("")+" "+even.join(""));
});

---------------------------------------------------------------------------------------------

46) Ria is always fascinated by the number 2. She always wants to know who came second in a race, the second person to set foot on the moon and so on. She is given a list of numbers and asked to find the maximum. As always, she reports the second highest number as the maximum because according to her, 2 is higher than 1. Find out which was the number that Ria would have reported, given a list of N numbers.
 

Input Description:
Size of the array followed by the elements of the array.

Output Description:
Second largest element of the array.

Sample Input :
10
1 9 8 7 6 5 2 3 4 10
Sample Output :
9

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  let a=userInput[0];
let b=userInput[1].split(" ").sort((a,b)=>a-b);
console.log(b[a-2]);
});
---------------------------------------------------------------------------------------------

47) Your old mobile phone gets broken and so you want to purchase a new smartphone and decide to go 
through all the online websites to find out which dealer has the best offer for a particular model. 
You document the prices of N dealers. Dealer ids start from 0 and go up to N.  
Find out which dealer has the best price for you.

Constraints:

1 <= N <= 100
1 <= A[] <= 100000

Input Description:
Number of dealers followed by the price offered by each dealer

Output Description:
Dealer offering the best price.

Sample Input :
3
10000 11200 12030
Sample Output :
Dealer0

CODE:

const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let a=parseInt(userInput[0]);
let n=userInput[1].split(" ").map(Number);
let lowest = n[0];
let val=0;
  for(let i=1;i<a;i++){
      if(lowest>n[i])val=i;   
  }
  console.log(`Dealer${val}`);
});

---------------------------------------------------------------------------------------------
49) Given numbers A,B find A^B.
Input Size : 1 <= A <= 5 <= B <= 50
Sample Testcase :
INPUT
3 4
OUTPUT
81

CODE:

const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  let a = userInput[0].split(" ");
  let A = a[0];
  let B = a[1];
  console.log(Math.pow(A,B));
});
---------------------------------------------------------------------------------------------

51) Given a number N and an array of N integers, find the sum of all the negative numbers in the array.
Input Size : N <= 100000
Sample Testcase :
INPUT
2
3 0
OUTPUT
0

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let a=parseInt(userInput[0]);
let n=userInput[1].split(" ").map(Number);
let sum=0;

for(let i=0;i<a;i++){
    if(n[i]<0) sum+=n[i];
}
console.log(sum);
});
---------------------------------------------------------------------------------------------

55) Given 2 numbers N,K print the array after deleting the last K elements.
Input Size : N,K <= 100000
Sample Testcase :
INPUT
5 4
1 2 3 4 5
OUTPUT
1

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  let t= userInput[0].split(" ").map(Number);
  let a=parseInt(t[0]);
  let b=parseInt(t[1]);
  let c=userInput[1].split(" ").reverse().map(Number);
  let arr=[];
  for(let i=0;i<a;i++){
      if(i>=b){
          arr.push(c[i]);
      }}
  if(arr.length===0){
    console.log(-1);  
  }else{
      console.log(arr.reverse().join(" "));
  }
});
---------------------------------------------------------------------------------------------

56) Prateek finds it difficult to judge the minimum element in the list of elements given to him. Your task is to develop the algorithm in order to find the minimum element.

Input Description:
You are given ‘n’ number of elements. Next line contains n space separated numbers.

Output Description:
Print the minimum element

Sample Input :
5
3 4 9 1 6
Sample Output :
1

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
    let total=userInput[0];
let a = userInput[1].split(" ").sort();
console.log(a[0]);

});
---------------------------------------------------------------------------------------------

60) Given a number N followed by N elements, find the second smallest element.
If it cannot be found then print -1
Input Size : N <= 100000 (ie do it in O(log n) time complexity)
Sample Testcase :
INPUT
5
1 2 3 4 5
OUTPUT
2

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  let a=parseInt(userInput[0]);
  let b=userInput[1].split(" ").map(Number).sort((a,b)=>a-b);
  let c=-1;
  for(let i=0;i<a;i++){
      if(b[i]<b[i+1]){
          c=b[i+1];
          break;
      }}
  console.log(c);
});
---------------------------------------------------------------------------------------------

61)  Rajat is given some special task to calculate the largest sum of two consecutive elements.
He solved some of questions but he is not sure whether his answer is correct or not. 
Your task is to help him in determining whether answers posted by him are correct or not.


Input Description:
The first line of the input is a integer N. The second line of the input consists of N space separated 
integer.

Output Description:
Print the max sum of two consecutive numbers from the given N numbers

Sample Input :
5
1 5 6 8 3
Sample Output :
14

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let a=parseInt(userInput[0]);
let n=userInput[1].split(" ").map(Number);
let sum=0;

for(let i=0;i<a-1;i++){
  if(n[i]+n[i+1]>sum) sum=n[i]+n[i+1];
}
console.log(sum);
});
---------------------------------------------------------------------------------------------

62) Given 2 array of size N and M.merge them in sorted order and print it.
Input Size : |N||M| <= 100000( O(n))
Sample Testcase :
INPUT
5 4
1 2 3 4 5
1 2 3 4
OUTPUT
1 1 2 2 3 3 4 4 5

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  let a=userInput[1].split(" ");
  let b=userInput[2].split(" ");
  let arr;
  arr=[...a,...b];
  console.log(arr.sort((a,b)=>a-b).join(" "));
});
---------------------------------------------------------------------------------------------

64) Given an array of N elements which follows either even number or odd number series.There may exists at maximum 1 even number in the odd series or 1 odd number in the even series.Find the different number if exists otherwise print '-1'?
Input Size : |N| <= 100000
Sample Testcase :
INPUT
5
1 3 4 5 7
OUTPUT
4

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let a=parseInt(userInput[0]);
let n=userInput[1].split(" ").map(Number);
let even=[];
let odd=[];
for(let i=0;i<a;i++){
    (n[i]%2===0)? even.push(n[i]):odd.push(n[i]);
    
}
if(even.length===1) console.log(even.join(" "));
else if(odd.length===1)console.log(odd.join(" "));
else console.log(-1);
});
---------------------------------------------------------------------------------------------
66) Ram is the CEO of an MNC. He wants to order the employee salaries in ascending order so that he can do a salary hike based on the salary values of employees. He selects you to do the task of sorting the salaries. Sort the salaries in ascending order and pass on the information to Ram.
 

Input Description:
Number of employees followed by the salaries of employees.

Output Description:
Salaries sorted in ascending order.

Sample Input :
8
7000 8000 6500 1200 4000 2800 3000 5230
Sample Output :
1200 2800 3000 4000 5230 6500 7000 8000

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => { 
  let a = userInput[0];
  let b =userInput[1].split(" ").sort(" ").join(" ");
  console.log(b);
});
---------------------------------------------------------------------------------------------

67) Given a string S, print the encoded string by adding 3 to each character(a maps to d,b maps to e,c maps to f and so on).
Input Size : 1 <= N <= 100000
Sample Testcase :
INPUT
RADAR
OUTPUT
UDGDU

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let a= userInput[0];
let arr=[];
for(let i=0;i<a.length;i++){
   let b=a.charCodeAt(i);
   let char=((b-65+3)%26)+65;
   arr.push(String.fromCharCode(char));
}
console.log(arr.join(""));
});
---------------------------------------------------------------------------------------------

68) Given a string S, print the reverse of the string after removing the vowels.If the resulting string is empty print '-1'.
Input Size : 1 <= N <= 100000
Sample Testcase :
INPUT
codekata
OUTPUT
tkdc

code:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let a=userInput[0].split("");
let arr=[];
for(let i=0;i<a.length;i++){
    if(a[i] !== "a" && a[i] !== "e" && a[i] !== "i" && a[i] !== "o" && a[i] !== "u" && a[i] !== "A" &&a[i] !== "E" &&a[0] !== "I" && a[0] !== "O" && a[0] !== "U" ){
        arr.push(a[i]);
    }
    
}
if(arr.length===0){
    console.log("-1");
}else{
    console.log(arr.reverse().join(""));
}
});
---------------------------------------------------------------------------------------------

69) Given 2 numbers N,K followed by N elements print all the elements lesser than K in sorted order.If the elements could not be found print -1
Input Size : N <= 100000
Sample Testcase :
INPUT
5 3
1 2 1 4 1
OUTPUT
1 1 1 2

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data.trim());
});

inp.on("close", () => {
const [n,k]=userInput[0].split(" ").map(Number);
const element=userInput[1].split(" ").map(Number);
const filtered=element.filter(el=>el<k);
if(filtered.length===0){
    console.log(-1);
}else{
   console.log(filtered.sort((a,b)=>a-b).join(" ")); 
}
});
---------------------------------------------------------------------------------------------

71) Given a string 'S' swap the even and odd characters starting from index 1(Assume the index starts from 0).
Input Size : |s| <= 10000000(complexity O(n))
Sample Testcase :
INPUT
codekata
OUTPUT
ocedakat

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  let s = userInput[0].split("");
  let arr=s
  for(let i=0;i<arr.length-1;i+=2){
    let temp=arr[i];
    arr[i]=arr[i+1];
    arr[i+1]=temp;
  }
  console.log(arr.join(""))
});
---------------------------------------------------------------------------------------------

74) Given an array of N elements switch(swap) the element with the adjacent element and print the output.
Sample Testcase :
INPUT
5
3 2 1 2 3
OUTPUT
2 3 2 1 3

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  let a=userInput[0]
  let s = userInput[1].split(" ");
  let arr=s
  for(let i=0;i<a-1;i+=2){
    let temp=arr[i];
    arr[i]=arr[i+1];
    arr[i+1]=temp;
  }
  console.log(arr.join(" "));
});
---------------------------------------------------------------------------------------------

76) Given a number N and an array of N elements, find the length of the longest repeating sequence of the elements.If no such sequence is found print -1
Input Size : N <= 100000
Sample Testcase :
INPUT
8
1 2 2 2 3 4 5 6
OUTPUT
3

CODE:

const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  let a=parseInt(userInput[0]);
  let n=userInput[1].split(" ").map(Number);
  let arr=[];
  let count=1;
  for(let i=0;i<a-1;i++){
      if(n[i]===n[i+1]){
          count++;
      }else{
          arr.push(count);
          count=1;
      }
  }
    arr=arr.sort((a,b)=>b-a);
    arr[0]!==1? console.log(arr[0]) : console.log(-1);
});
---------------------------------------------------------------------------------------------
77) Given a number N in decimal convert it into binary value.
Input Size : N <= 100000
Sample Testcase :
INPUT
5
OUTPUT
101

CODE:
// Getting input via STDIN
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  //start-here
  //Your code goes here … replace the below line with your code logic 
let a=parseInt(userInput[0]);
let arr=[];
while(a>0){
    arr.push(a%2);
        a=Math.floor(a/2);
     
}

  console.log(arr.reverse().join(""));
});

---------------------------------------------------------------------------------------------

78) Given 2 strings S1 and s2, check whether they are case senitively equal without using any predefined function(case sensitive).If they are not same print 'no'
Sample Testcase :
INPUT
guvi guvi
OUTPUT
yes

code:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let a=userInput[0].split(" ");
let b=a[0];
let c=a[1];
if(b===c){
    console.log("yes");
}else{
    console.log("no")
}
});
---------------------------------------------------------------------------------------------

80) Given a sentence S take out the extra spaces.If no extra space is present print the same as output.
Input Size : |s| <= 100000(complexity O(n))
Sample Testcase :
INPUT
codekata challenge
OUTPUT
codekata challenge

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let a=userInput[0];
    console.log(a.trim().replace(/\s+/g,' '));
});
---------------------------------------------------------------------------------------------

82) Given an array of numbers and another number k. Find whether K exists and the number of time k repeats. If it does not exist just print no.
Input Size : |N| <= 1000000
Sample Testcase :
INPUT
5 3
3 3 4 4 7
OUTPUT
yes 2
CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let [a,k]=userInput[0].split(" ").map(Number);
let n=userInput[1].split(" ").map(Number);
let count=0;
for(let i=0;i<a;i++){
    if(n[i]===k){
        count++;
    }
}
(count===0)?console.log("no"): console.log(`yes ${count}`);
});
---------------------------------------------------------------------------------------------

83) Given a binary number convert it to hexadecimal.
Sample Testcase :
INPUT
1100100
OUTPUT
64

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  let num=userInput[0]
  console.log(parseInt(num,2).toString(16));
});
---------------------------------------------------------------------------------------------

84) Given a number N and an array of N elements, print the array after removing duplicate elements.
If no duplicate elements found print the same.
Input Size : N <= 100000
Sample Testcase :
INPUT
4
2 4 4 2
OUTPUT
2 4

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => { 
  let a=parseInt(userInput[0]);
  let b=userInput[1].split(" ");
  let arr=[];
  for(let i=0;i<a;i++){
      if(!arr.includes(b[i])){
          arr.push(b[i]);
      }}
  console.log(arr.join(" "));
});
---------------------------------------------------------------------------------------------

87) Given a binary number convert it into octal format.
Sample Testcase :
INPUT
1100100
OUTPUT
144

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  let a=parseInt(userInput[0]);
  console.log(parseInt(a,2).toString(8));
});
---------------------------------------------------------------------------------------------

91) Given a number N, find the number of ones in its binary representation.
Sample Testcase :
INPUT
276
OUTPUT
3

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let a=parseInt(userInput[0]);
let arr=[];
while(a>0){
    arr.push(a%2);
        a=Math.floor(a/2);
}
let count=0;
for(let i=0;i<arr.length;i++){
    if(arr[i]===1) count++; 
}
console.log(count);
});
---------------------------------------------------------------------------------------------

92) A number is given as input.Find the maximum number that can be formed using the digits.
Input Size : N <= 10000000
Sample Testcase :
INPUT
4123
OUTPUT
4321

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let n=userInput[0].split("").sort((a,b)=>(b-a)).join("");
console.log(n);
});
---------------------------------------------------------------------------------------------

93) Given a number N, followed by an array of N elements,print 'yes' if it is a sorted array(either ascending or descending)otherwise print 'no'.
Input Size : 1 <= N <= 100000
Sample Testcase :
INPUT
3
2 3 7
OUTPUT
yes

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
 let a=userInput[1].split(" ").map(Number).join("");
 let asc=a.split("").sort((a,b)=>a-b).join("");
 let des=a.split("").sort((a,b)=>b-a).join("");
 (a===asc || a===des)?console.log("yes"): console.log("no");
});
---------------------------------------------------------------------------------------------

97) Given 2 numbers N and K.Print the number of occurrences of K in N.If K is not found print '-1'.
Input Size : 1 <= N <= 100000, 0 <= K <= 9
Sample Testcase :
INPUT
1000 0
OUTPUT
3

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  let a=userInput[0].split(" ");
  let n=a[0].split("").map(Number);
  let k=parseInt(a[1]);
  let total=0;
  for(let i=0;i<n.length;i++){
      if(n[i]===k){
          total++;
      }}
  if(total===0){
      console.log(-1);
  }else{
      console.log(total);
  }
});
---------------------------------------------------------------------------------------------

98) Given a string S, print 'yes' if the strings 'GUVI' and 'GEEK' is present case-sensitively in the string else print 'no'.
Input Size : 1 <= 100
Sample Testcase :
INPUT
Vishal_Sundar prepared this question
OUTPUT
no

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
 let a = userInput[0];
 if(a.includes("GUVI") && a.includes("GEEK")){
    console.log("yes");
 }else{
     console.log("no");
 }
});
---------------------------------------------------------------------------------------------

99) Given an array, find the maximum difference between any two elements.
Input Size : N <= 1000000(complexity O(n) or O(nlogn))
Sample Testcase :
INPUT
5
1 2 3 4 5
OUTPUT
4

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  
  let a=userInput[1].split(" ").map(Number).sort((a,b)=>a-b);
  console.log(a[a.length-1]-a[0]);
});
---------------------------------------------------------------------------------------------

100) Given a number 'N' print the sum of each digit to the power of number of digits in given input.
Example :
Input => 1234
=> ( 1 ^ 4 ) + ( 2 ^ 4 ) + ( 3 ^ 4 ) + ( 4 ^ 4 )
=> 1 + 16 + 81 + 256
Output => 354
N <=100000000000
Sample Testcase :
INPUT
1234
OUTPUT
354

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  let a=userInput[0].split("").map(Number);
  let total=0;
  for(let i=0;i<a.length;i++){
      total+=Math.pow(a[i],a.length);
  }
  console.log(total);
});

 ---------------------------------------------------------------------------------------------

102) Given 2 arrays print 'yes' if they are mirror images of each other,otherwise 'no'.
Input Size : N <= 1000000
Sample Testcase :
INPUT
4
1 2 3 4
4 3 2 1
OUTPUT
yes

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
    let total=userInput[0];
 let a=userInput[1].split(" ").join("");
 let b=userInput[2].split(" ").reverse().join("");
 if(a.length==b.length){
     if(a==b){
         console.log("yes");
     }else{
         console.log("no");
     }
 }
});
---------------------------------------------------------------------------------------------

108) Given a string and a number K, change every kth character to uppercase from beginning in string.
Sample Testcase :
INPUT
string 2
OUTPUT
sTrInG

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let n=userInput[0].split(" ");
let a=n[0].split("");
let val=n[1];
let ans=[]
let num=0;
for(let i=0;i<a.length;i++){
    num+=1;
    if(num%val===0){
       ans.push(a[i].toUpperCase()) ;
    }else{
       ans.push(a[i]) 
    }
    
}
  console.log(ans.join(""));
});
---------------------------------------------------------------------------------------------

109) Given a string and a number K.Print every kth character from the beginning.
Sample Testcase :
INPUT
string 3
OUTPUT
r g

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let n=userInput[0].split(" ");
let a=n[0].split("");
let val=n[1];
let ans=[]
let num=0;
for(let i=0;i<a.length;i++){
    num+=1;
    if(num%val===0){
       ans.push(a[i]) ;
    }
}
  console.log(ans.join(" "));
});
---------------------------------------------------------------------------------------------

118) Given a number N and an array of N elements, print all elements lesser than N in descending order.If no element found print -1
Input Size : 1 <= N <= 10000
Sample Testcase :
INPUT
5
2 14 15 14 3
OUTPUT
3 2

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  let a=parseInt(userInput[0]);
  let b= userInput[1].split(" ").map(Number);
  let arr=[];
  for(let i=0;i<a;i++){
      if(b[i]<a){
          arr.push(b[i]);
      }}
  if(arr.length===0){
      console.log(-1);
  }else{
      console.log(arr.sort((a,b)=>b-a).join(" "));
  }
});
---------------------------------------------------------------------------------------------

119) Given an array of N elements,find the maximum length of increasing continuous sub-array.If it is not found print '-1'.
Input Size : N <= 100000
Sample Testcase :
INPUT
5
1 2 3 2 1
OUTPUT
3

CODE:

const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  
let a= parseInt(userInput[0]);
let b=userInput[1].split(" ").map(Number);
let arr=[];
let count=1;
for(let i=0;i<a-1;i++){
    if(b[i]<b[i+1]) count++;
    else{
        arr.push(count);
        count=1;
    }
}
arr.push(count);
arr=arr.sort((a,b)=>b-a);
(arr[0]===1)? console.log(-1) : console.log(arr[0]);
});
---------------------------------------------------------------------------------------------

126) You are given with string of words,we have to arrange them in reverse saturated order.
Input Description:
You are given a string ‘s’.

Output Description:
Print the reverse saturated order

Sample Input :
I am kohli fan
Sample Output :
I ma ilhok naf

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => { 
    let a= userInput[0].split(" ");
    let arr=[];
    for(let i=0;i<a.length;i++){
        let val=a[i].split("")
        arr.push(val.reverse().join(""));
    }
    console.log(arr.join(" "));
});
---------------------------------------------------------------------------------------------

133) Given 2 strings and a number K, check whether they differ exactly by K characters.
Input Size : |s| <= 100000(complexity O(nlogn) or O(n))
Sample Testcase :
INPUT
codekata codeguvi 4
OUTPUT
yes

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let a=userInput[0].split(" ");
let first=a[0].split("");
let sec=a[1].split("");
let k=parseInt(a[2]);
let count=0;
for(let i=0;i<first.length;i++){
    if(first[i]!==sec[i]){
        count+=1;
    }
}
if(count===k){
    console.log("yes");
}else{
    console.log("no");
}
});
---------------------------------------------------------------------------------------------

135) Given a number N and an array of N elements, print the prefix sum array.
Input Size : N <= 100000
Sample Testcase :
INPUT
4
2 4 4 2
OUTPUT
2 6 10 12

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  let a=parseInt(userInput[0]);
  let b=userInput[1].split(" ").map(Number);
  let pre=b[0];
  let arr=[];
  for(let i=1;i<=b.length;i++){
      arr.push(pre);
      pre=pre+b[i];
  }
console.log(arr.join(" "));
});
---------------------------------------------------------------------------------------------

137) Given a number N and a number K, check if it has all digits from 0 to k in it.
Input Size : N <= 100000
Sample Testcase :
INPUT
1234034 4
OUTPUT
yes
CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  let a = userInput[0].split(" ");
  let b = a[0].split("").map(Number).sort((a,b)=>a-b);
  let c = parseInt(a[1]);
  let yes=true;
for(let i=0;i<c;i++){
    if(b[i]!==i){
        console.log("no");
        yes=false;
        break;
    }}
if(yes){
    console.log("yes");
}
});
---------------------------------------------------------------------------------------------

139) Given a string S consisting of only '(' and ')', print 'yes' if it is balanced otherwise print 'no'.
Sample Testcase :
INPUT
(())
OUTPUT
yes

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let a=userInput[0].split("");
let last=a.length-1;
let ispal=true;
let val=0;
   for(let i=0;i<a.length/2;i++){
       if(a[i]!=="("  || a[last-i] !==")"){
          ispal=false;
          break;
       }
       }
   if(ispal){
       console.log("yes");
   }else{
       console.log("no");
   }

});
---------------------------------------------------------------------------------------------

140) Given a range[L,R], print the sum of all the odd numbers within the range(inclusive of L and R).
Sample Testcase:
INPUT
5 10
OUTPUT
21

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let [n,k]=userInput[0].split(" ").map(Number);
let sum=0;
for(let i=n;i<=k;i++){
    if(i%2!==0){
       sum+=i; 
    }}
console.log(sum);
});
---------------------------------------------------------------------------------------------

142) Given a number N and an array of N elements, print the suffix sum of the array.
Input Size : N <= 100000
Sample Testcase :
INPUT
4
2 4 4 2
OUTPUT
12 10 6 2

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let a= parseInt(userInput[0]);
let b=userInput[1].split(" ").map(Number);
let arr=[];
for(let i=0;i<a;i++){
    let num=0;
    for(let j=i;j<a;j++){
        num+=b[j];
    }
    arr.push(num);
}
console.log(arr.join(" "));
});
---------------------------------------------------------------------------------------------

146) Given a number N and an array of N strings, find the lexicographically smallest string.
Input Size : N <= 1000
Sample Testcase :
INPUT
3
code
learn
practice
OUTPUT
code

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let a= parseInt(userInput[0]);
let arr=[];
for(let i=1;i<=a;i++){
    arr.push(userInput[i]);
}
arr=arr.sort((a,b)=>a-b);
arr=arr[0];
console.log(arr);
});
---------------------------------------------------------------------------------------------

147) Given a number N and array of N integers, print the prefix sum array for each position if it is divisible by 2 else print the element itself.
Input Size : N <= 10000
Sample Testcase :
INPUT
4
2 4 4 4
OUTPUT
2 6 10 14

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let k=parseInt(userInput[0]);
let n=userInput[1].split(" ").map(Number);
let arr=[];
let val=0;
for(let i=0;i<k;i++){
    val+=n[i];
    if(val%2===0){
        arr.push(val);
    }else{
        arr.push(n[i]); 
    }}
console.log(arr.join(" "));
});
---------------------------------------------------------------------------------------------

149) Given a number n and 2 numbers l and r followed by n numbers, find the smallest number in the range [l,r].
Sample Testcase :
INPUT
5 2 4
1 2 3 4 5
OUTPUT
2

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let [n,l,r]=userInput[0].split(" ").map(Number);
let num=userInput[1].split(" ").map(Number);
let arr=[];
for(let i=0;i<n;i++){
    if(i+1>=l && i+1<=r){
        arr.push(num[i]);
    }}
arr.sort((a,b)=>a-b);
console.log(arr[0]);
});
---------------------------------------------------------------------------------------------

151) Given an array N, sort it in ascending order till it reaches kth elements 
and after that sort it in descending order.
Input Size : N <= 100000
Sample Testcase :
INPUT
5 2
4 3 1 2 4
OUTPUT
3 4 4 2 1

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let [n,l]=userInput[0].split(" ").map(Number);
let num=userInput[1].split(" ").map(Number);
let arr1=[];
let arr2=[];
for(let i=0;i<n;i++){
    if(i<l){
        arr1.push(num[i]);
    }else(
        arr2.push(num[i]));
}
arr1.sort((a,b)=>a-b);
arr2.sort((a,b)=>b-a);
arr1=[...arr1,...arr2];
console.log(arr1.join(" "));
});
---------------------------------------------------------------------------------------------

153) A number is given as input. Find the odd digits in the number, add them and find if the sum is odd or not. If even print E, if odd print O.
Input Size : N <= 10000000000
Sample Testcase :
INPUT
413
OUTPUT
E

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let a=userInput[0].split("").map(Number);
let sum=0;
for(let i=0;i<a.length;i++){
    if(a[i]%2 !== 0) sum+=a[i];
}
console.log((sum%2===0) ? "E" : "O" );
});

---------------------------------------------------------------------------------------------

157) Given k sorted arrays of possibly different sizes, merge them and print the sorted output.
Input Size : N<=100
Example:
INPUT
k = 3
1 3
2 4 6
0 9 10 11
OUTPUT
0 1 2 3 4 6 9 10 11

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  let a = parseInt(userInput[0]);
  let arr=[]
  for(let i=1;i<=a;i++){
      arr.push(...userInput[i].split(" "))
  }
arr.sort((a, b) => a - b);
   console.log(arr.join(" "));
});
---------------------------------------------------------------------------------------------

163) Iron Man wants to extract an infinity stone from a safe. The safe is protected by a password and Iron Man knows the clue to the password which is “sum one and two when sorted they are true”. Decode the clue from the test case and help Iron Man open the safe.

Input Description:
Size of the array followed by the elements of the array

Output Description:
Sum of 2 specific elements in the array.

Sample Input :
5
9 8 3 2 1
Sample Output :
3

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => { 
    let a=userInput[0];
    let b=userInput[1].split(" ").map(Number);
    b.sort((a,b)=>a-b);
    console.log(b[0]+b[1]);
});
---------------------------------------------------------------------------------------------

166) You are given a number n,ranging from 1 to n. Out of which one number is missing. Your task is to print that missing number.

Input Description:
You are given a number ‘n’.

Output Description:
Print the missing number.

Sample Input :
5
1 3 5 2
Sample Output :
4

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
    let a=userInput[0];
    let b=userInput[1].split(" ").map(Number);
    b=b.sort();
    let val=1;
    for(let i=0;i<a;i++){
        if(b[i]!==val){
            console.log(val);
            break;
        }
        val+=1;
    }
});
---------------------------------------------------------------------------------------------

169)Given a number N and an array of N integers, predict if the product of all elements would be even or odd(actual multiplication may lead to overflows ai <= 100000000).If there is only one element present in the array print whether that number is odd or even.
Input Size : N <= 100000
Sample Testcase :
INPUT
4
2 4 4 2
OUTPUT
even

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
 let a=parseInt(userInput[0]);
 let b= userInput[1].split(" ").map(Number);
 let isEven=false;
 for(let i=0;i<a;i++){
     if(b[i]%2===0){
         isEven=true;
         break;
     }
 }
 if(isEven){
     console.log("even")
 }else{
     console.log("odd")
 }

});
---------------------------------------------------------------------------------------------

171) Given a number N, check if the sum of the digits is a Palindrome. Print 'yes' or 'no' accordingly.
Input Size : 2 <= N <= 1000000000000000000
Sample Testcases :
INPUT
13
OUTPUT
yes

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let a=userInput[0].split("").map(Number);
let sum=0;
for(let i=0;i<a.length;i++){
    sum+=a[i];
}
if(sum>=0 && sum<=9){
    console.log("yes");
}else if(sum.toString()===sum.toString().split("").reverse().join("")){
    console.log("yes");
}else{
    console.log("no");
}
});
---------------------------------------------------------------------------------------------

178) Given a number n followed by n numbers. Find the numbers which are equal to their index value and print them in sorted order. If no such numbers are present print '-1' without quotes.
Input Size : 1 <= n <= 100000
Sample Testcases :
INPUT
6
6 7 3 3 4 5
OUTPUT
3 4 5

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let a=parseInt(userInput[0]);
let b= userInput[1].split(" ").map(Number);
let arr=[];
for(let i=0;i<a;i++){
    if(i===b[i]){
        arr.push(b[i]);
    }}
if(arr.length===0){
  console.log(-1);  
}else{
   console.log(arr.join(" ")); 
}
});
---------------------------------------------------------------------------------------------

180) Given a number N followed by N numbers. Print the even numbers which are present in odd 
positions and odd numbers which are present in even positions(0 indexing)
If no element is found print '-1'.
Input Size : 1 <= N <= 100000
Sample Testcases :
INPUT
7
1 2 3 4 5 6 7
OUTPUT
1 2 3 4 5 6 7

CODE: 
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let a=parseInt(userInput[0]);
let b=userInput[1].split(" ").map(Number);
let arr=[];
for(let i=0;i<a;i++){
    if(i%2!==b[i]%2){
        arr.push(b[i]);
    }}
if(arr.length===0){
    console.log(-1);
}else{
    console.log(arr.join(" "));
}
});
---------------------------------------------------------------------------------------------

182) Given a string S of length N, write a program that would reverse every word in the string.
Input Size : 1 <= N <= 100000
Sample Testcases :
INPUT
Hello World
OUTPUT
olleH dlroW

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});
 
inp.on("close", () => { 
  let a= userInput[0].split(" ");
  let arr=[];
  for(let i=0;i<a.length;i++){
      arr.push(a[i].split("").reverse().join(""));
  }
  console.log(arr.join(" "));
});
---------------------------------------------------------------------------------------------

185) Given two numbers N,K(N>=K) and an array of N elements, write a program to find the Kth largest element.
Input Size : 1 <= K <= N <= 100000
Sample Testcases :
INPUT
6 2
1 2 3 4 5 6
OUTPUT
5

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let [n,k]=userInput[0].split(" ").map(Number);
let a=userInput[1].split(" ").map(Number).sort((a,b)=>b-a);
count=1;
for(let i=1;i<n;i++){
    if(a[i]!==a[i-1]){
      count+=1;  
       if(count===k) {
           console.log(a[i]);
           break;
       }}}
});
---------------------------------------------------------------------------------------------
191) Given a number N followed by N numbers. Find the largest number which can be formed from the given numbers and print it.
NOTE: Each number should be used exactly once.
Input Size : 1 <= N <= 100000
Sample Testcases :
INPUT
5
5 6 7 8 9
OUTPUT
98765

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});
 
inp.on("close", () => {
 let num = userInput[1].split(" ").sort((a,b)=>b-a).join("");
 console.log(num);
});
---------------------------------------------------------------------------------------------

192) Given 2 numbers N and K and followed by an array of N integers. The given element K is removed from the array and new array is printed. If after removing every occurance of K the array becomes empty, print 'empty' without quotes.
Example:
Input: {10,10,20,30,76}, K=10
Output: {20,20,76}
Input Size : N <= 100000
Sample Testcase :
INPUT
5 10
10 10 20 30 76
OUTPUT
20 30 76

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let [n,k]=userInput[0].split(" ").map(Number);
let a=userInput[1].split(" ").map(Number);
let arr=[];
for(let i=0;i<n;i++){
    if(a[i]!==k){
        arr.push(a[i]);
    }}
if(arr.length===0){
    console.log("empty");
}else{
  console.log(arr.join(" "));  
}
});
---------------------------------------------------------------------------------------------

194) Given a number N followed by N numbers.Find the smallest number and largest number and print both the indices(1 based indexing).
Input Size : N <= 100000
Sample Testcase :
INPUT
5
1 2 3 4 5
OUTPUT
1 5

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
   let a= userInput[0];
   let b= userInput[1].split(" ");
   small=b[0];
   large=b[0];
   for(let i=1;i<b.length;i++)
   {
       if(small>b[i]){
           small=b[i];
       }
       if(large<b[i]){
           large=b[i];
       }
   }
   console.log(b.indexOf(small)+1, b.indexOf(large)+1);
});
---------------------------------------------------------------------------------------------

201) Given a number N, print all prime numbers less than N(in ascending order).
Input Size : 1 <= N <= 100000
Sample Testcase :
INPUT
10
OUTPUT
2 3 5 7

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let a=parseInt(userInput[0]);
let arr=[];

for(let i=2;i<a;i++){
 let isprime=true;
    for(let j=2;j<i;j++){
        if(i%j===0) isprime=false;   
    }
    if(isprime) arr.push(i);
}
console.log(arr.join(" "));
});
---------------------------------------------------------------------------------------------

210) Given a string S convert each characters of the string into ASCII values and print the sum of the numbers.
Input Size : |s| <= 100000
Sample Testcase :
INPUT
guvi
OUTPUT
443

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => { 
let a=userInput[0];
let val=0;
for(let i=0;i<a.length;i++){
   val+=a.charCodeAt(i);
}
console.log(val);
});
---------------------------------------------------------------------------------------------

212) Varsha is a Machine learning scientist. She wants to apply a few ML algorithms on the dataset 
to do some research and for that, she wants to merge two given arrays and sort them in ascending order.
 You are an intern working under Varsha and she has asked for your help for the same. 
 Given 2 arrays arr1[] and arr2[], find the union of both the arrays sorted in ascending order.  
 Note: Union of two arrays must have distinct elements.

Input Description:
Size of arr1[] followed by elements of arr1. Size of arr2[] followed by elements of arr2.

Output Description:
Union of arr1 and arr2 sorted in ascending order.

Sample Input :
2 
87 78
3
1 2 3
Sample Output :
1 2 3 78 87

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let a= userInput[1].split(" ").map(Number);
let b= userInput[3].split(" ").map(Number);
let c=[...new Set([...a,...b])];
console.log(c.sort((a,b)=>a-b).join(" "));
});
---------------------------------------------------------------------------------------------

213) Given a number N print the right-angled triangle with the top level having N 1's followed by each level with is one 1 lesser.
Input Size : N <= 1000
Sample Testcase :
INPUT
3
OUTPUT
1 1 1
1 1
1

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
   let a= userInput[0];
   let arr=[];
   let b=a;
   for(let i=0;i<a;i++){
       for(let j=0;j<b;j++){
           arr.push(1);
       }
       console.log(arr.join(" "));
       arr=[];
       b-=1;
   }
});
---------------------------------------------------------------------------------------------

1)

CODE:

---------------------------------------------------------------------------------------------

224) Given a string S of length N, find whether the given string is a palindrome using stack 
or linked list and print 'yes' otherwise print 'no'.
Input Size : 1 <= N <= 100000
Sample Testcases :
INPUT
GuviGeek
OUTPUT
no

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let a=userInput[0];
let b=a.split("").reverse().join("");
if(a===b){
    console.log("yes");
}else{
    console.log("no");
}
});
---------------------------------------------------------------------------------------------

228) Find the count k by which array has been rotated in the rotated sorted array. Given a number N followed 2 arrays A and B of length N. Find the amount K by which the array has been rotated.
Input Size : N <= 100000
Sample Testcase :
INPUT
4
4 3 2 5
3 2 5 4
OUTPUT
1

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data.trim());
});

inp.on("close", () => {
  const N = parseInt(userInput[0]);
  const A = userInput[1].split(" ").map(Number);
  const B = userInput[2].split(" ").map(Number);

  for (let k = 0; k < N; k++) {
    let rotated = A.slice(k).concat(A.slice(0, k));
    let match = true;
    for (let i = 0; i < N; i++) {
      if (rotated[i] !== B[i]) {
        match = false;
        break;
      }
    }
    if (match) {
      console.log(k);
      return;
    }
  }
});

---------------------------------------------------------------------------------------------

237) You are given an array 'a' of size N. Your task is to print the array one element in a line in the decreasing order of number of ones in its binary representation. In case of two numbers having same number of ones, the bigger number in its decimal representation comes first.
Input Size : N<=10000
Example:
INPUT
5
31 14 15 7 2
OUTPUT
31
15
14
7
2

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  let N = parseInt(userInput[0]);
  let arr = userInput[1].split(" ").map(Number);

  arr.sort((a, b) => {
    const onesA = a.toString(2).split('1').length - 1;
    const onesB = b.toString(2).split('1').length - 1;

    if (onesA !== onesB) {
      return onesB - onesA; // more 1's first
    } else {
      return b - a; // bigger number first
    }
  });

  arr.forEach(num => console.log(num));
});

---------------------------------------------------------------------------------------------

238) Given an amount A(integer) find the number of currency notes required to make the amount up in the most optimal way. The available denominations are 1000,500,100,50,10,1. The question is set in PRE-DEMONITISATION era so 1000 rupee notes are available :)
eg: rs 689 (* currency notes are 500,100,50,10,1 )
500+100+50+(3*10)+(9*1)
count=15
Input Size : N <= 100000000
Sample Testcase :
INPUT
689
OUTPUT
15

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

let userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  let A = parseInt(userInput[0]);
  let denominations = [1000, 500, 100, 50, 10, 1];
  let count = 0;

  for (let note of denominations) {
    let numNotes = Math.floor(A / note);
    count += numNotes;
    A = A % note;
  }

  console.log(count);
});

---------------------------------------------------------------------------------------------

240) Given three numbers L,R,N, print the count of numbers with occurences of the number N in [L,R].
Input Size : 1 <= L,R,N <= 100000
Sample Testcase :
INPUT
10 130 11
OUTPUT
11
Explanation: 11,110,111,112....119

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin,
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
  let [L, R, N] = userInput[0].split(" ").map(Number);
  let target = N.toString();
  let count = 0;

  for (let i = L; i <= R; i++) {
    if (i.toString().includes(target)) {
      count++;
    }
  }

  console.log(count);
});

---------------------------------------------------------------------------------------------

243) Alternate sorting:Given a number N followed by array of N elements,sort the array in such a way that the first number is the first maximum and second number is the 1st minimum 3rd number isthe 2nd maximum and so on.
Input Size : N <= 100000
Sample Testcase :
INPUT
8
7 623 19 10 11 9 3 15
OUTPUT
623 3 19 7 15 9 11 10

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
 let a= parseInt(userInput[0]);
 let b= userInput[1].split(" ").map(Number).sort((a,b)=>b-a);
 let arr=[];
 for(let i=0;i<a/2;i++){
    arr.push(b[i]);
    arr.push(b[b.length-i-1]);
 }
 if(a%2===1){
     console.log(arr.slice(0,-1).join(" "));
 }else{
    console.log(arr.join(" ")); 
 }
});
---------------------------------------------------------------------------------------------

253) Given a number N and N strings of length atmost M, print the longest common prefix.
Input Size : 1<=N, M<=100000
Example:
INPUT
2
Vishal
Vidharba
OUTPUT
Vi

CODE:
const readline = require("readline");

const inp = readline.createInterface({
  input: process.stdin
});

const userInput = [];

inp.on("line", (data) => {
  userInput.push(data);
});

inp.on("close", () => {
let a=userInput[1].split("");
let b=userInput[2].split("");
let arr=[];
for(let i=0;i<a.length;i++){
    if(a[i]===b[i]){
        arr.push(a[i]);
    }else{
        break;
    }}
console.log(arr.join(""));
});
---------------------------------------------------------------------------------------------

1)

CODE:

---------------------------------------------------------------------------------------------
